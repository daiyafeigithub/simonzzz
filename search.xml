<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/simonzzz/2025/04/22/skills/point/rabbitmq/"/>
      <url>/simonzzz/2025/04/22/skills/point/rabbitmq/</url>
      
        <content type="html"><![CDATA[<h2 id="一、RabbitMQ-核心概念与架构"><a href="#一、RabbitMQ-核心概念与架构" class="headerlink" title="一、RabbitMQ 核心概念与架构"></a><strong>一、RabbitMQ 核心概念与架构</strong></h2><p>RabbitMQ 是基于 <strong>AMQP 0-9-1 协议</strong>的消息中间件，其核心设计目标是实现高可靠、可扩展的异步通信。以下是关键组件的详细说明：</p><ol><li><p><strong>AMQP 协议</strong>：</p><ul><li><strong>消息模型</strong>：生产者（Producer）将消息发送到交换机（Exchange），交换机根据路由规则（Routing Key）将消息分发到队列（Queue），消费者（Consumer）从队列中消费消息。</li><li><strong>协议特性</strong>：支持消息确认（Ack）、持久化、事务等机制，确保消息可靠传输。</li></ul></li><li><p><strong>核心组件</strong>：</p><ul><li><strong>Virtual Host</strong>：逻辑隔离单元，允许在同一 RabbitMQ 实例中创建多个虚拟环境。</li><li><strong>Connection &amp; Channel</strong>：<ul><li><strong>Connection</strong>：TCP 连接，资源消耗较大。</li><li><strong>Channel</strong>：轻量级的虚拟连接，复用 Connection，减少系统开销。</li></ul></li><li><strong>Exchange 类型</strong>：<ul><li><strong>Direct</strong>：精确匹配 Routing Key。</li><li><strong>Fanout</strong>：广播消息到所有绑定队列。</li><li><strong>Topic</strong>：支持通配符（<code>*</code> 匹配一个单词，<code>#</code> 匹配零个或多个单词）。</li><li><strong>Headers</strong>：基于消息头属性匹配（较少使用）。</li></ul></li></ul></li></ol><hr><h2 id="二、消息传递模式与-Java-示例"><a href="#二、消息传递模式与-Java-示例" class="headerlink" title="二、消息传递模式与 Java 示例"></a><strong>二、消息传递模式与 Java 示例</strong></h2><h3 id="1-发布-订阅模式（Pub-Sub）"><a href="#1-发布-订阅模式（Pub-Sub）" class="headerlink" title="1. 发布&#x2F;订阅模式（Pub&#x2F;Sub）"></a><strong>1. 发布&#x2F;订阅模式（Pub&#x2F;Sub）</strong></h3><ul><li><strong>场景</strong>：日志系统向所有订阅者广播消息。</li><li><strong>代码示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PubSubProducer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;pubsub_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">             <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Broadcast message!&quot;</span>;</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PubSubConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;pubsub_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> channel.queueDeclare().getQueue();</span><br><span class="line">        channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">true</span>, deliverCallback, consumerTag -&gt; &#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="2-RPC-模式（Remote-Procedure-Call）"><a href="#2-RPC-模式（Remote-Procedure-Call）" class="headerlink" title="2. RPC 模式（Remote Procedure Call）"></a><strong>2. RPC 模式（Remote Procedure Call）</strong></h3><ul><li><strong>场景</strong>：客户端发起请求，服务端处理后返回结果。</li><li><strong>代码示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RPC 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RPCClient</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Channel channel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String replyQueue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RPCClient</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line">        replyQueue = channel.queueDeclare().getQueue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">(String message)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">corrId</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        AMQP.<span class="type">BasicProperties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AMQP</span>.BasicProperties.Builder()</span><br><span class="line">            .correlationId(corrId)</span><br><span class="line">            .replyTo(replyQueue)</span><br><span class="line">            .build();</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;rpc_queue&quot;</span>, props, message.getBytes());</span><br><span class="line">        <span class="keyword">final</span> BlockingQueue&lt;String&gt; response = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (delivery.getProperties().getCorrelationId().equals(corrId)) &#123;</span><br><span class="line">                response.offer(<span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(replyQueue, <span class="literal">true</span>, deliverCallback, consumerTag -&gt; &#123;&#125;);</span><br><span class="line">        <span class="keyword">return</span> response.take();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RPC 服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RPCServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RPC_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;rpc_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">             <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel()) &#123;</span><br><span class="line">            channel.queueDeclare(RPC_QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            channel.basicQos(<span class="number">1</span>);</span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> <span class="string">&quot;Response to &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                AMQP.<span class="type">BasicProperties</span> <span class="variable">replyProps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AMQP</span>.BasicProperties.Builder()</span><br><span class="line">                    .correlationId(delivery.getProperties().getCorrelationId())</span><br><span class="line">                    .build();</span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>, delivery.getProperties().getReplyTo(), replyProps, response.getBytes());</span><br><span class="line">                channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            channel.basicConsume(RPC_QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123;&#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Awaiting RPC requests&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="三、高级特性与最佳实践"><a href="#三、高级特性与最佳实践" class="headerlink" title="三、高级特性与最佳实践"></a><strong>三、高级特性与最佳实践</strong></h2><h3 id="1-消息持久化"><a href="#1-消息持久化" class="headerlink" title="1. 消息持久化"></a><strong>1. 消息持久化</strong></h3><ul><li><strong>队列持久化</strong>：声明队列时设置 <code>durable=true</code>。</li><li><strong>消息持久化</strong>：发布消息时设置 <code>MessageProperties.PERSISTENT_TEXT_PLAIN</code>。</li><li><strong>作用</strong>：防止 RabbitMQ 重启后数据丢失。</li></ul><h3 id="2-死信队列（DLQ）"><a href="#2-死信队列（DLQ）" class="headerlink" title="2. 死信队列（DLQ）"></a><strong>2. 死信队列（DLQ）</strong></h3><ul><li><strong>场景</strong>：处理未被消费的消息（如消息过期、队列达到最大长度）。</li><li><strong>配置</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, <span class="string">&quot;dlq_exchange&quot;</span>);</span><br><span class="line">channel.queueDeclare(<span class="string">&quot;main_queue&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, args);</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-消息确认与手动应答"><a href="#3-消息确认与手动应答" class="headerlink" title="3. 消息确认与手动应答"></a><strong>3. 消息确认与手动应答</strong></h3><ul><li><strong>手动 Ack</strong>：消费者处理完消息后显式发送确认，确保消息不丢失。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">channel.basicConsume(QUEUE_NAME, <span class="literal">false</span>, deliverCallback, consumerTag -&gt; &#123;&#125;);</span><br><span class="line"><span class="comment">// 在 DeliverCallback 中处理完消息后：</span></span><br><span class="line">channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-集群与高可用"><a href="#4-集群与高可用" class="headerlink" title="4. 集群与高可用"></a><strong>4. 集群与高可用</strong></h3><ul><li><strong>集群模式</strong>：将多个 RabbitMQ 节点组成集群，共享队列和消息。</li><li><strong>镜像队列</strong>：将队列数据同步到多个节点，提升可用性。</li></ul><hr><h2 id="四、RabbitMQ-应用场景"><a href="#四、RabbitMQ-应用场景" class="headerlink" title="四、RabbitMQ 应用场景"></a><strong>四、RabbitMQ 应用场景</strong></h2><ol><li><strong>流量削峰</strong>：应对秒杀、抢红包等高并发场景，通过队列缓冲请求。</li><li><strong>异步解耦</strong>：解耦订单系统与库存系统，提升系统扩展性。</li><li><strong>日志处理</strong>：收集分布式系统的日志并分发到分析系统。</li><li><strong>数据同步</strong>：跨系统数据同步（如订单状态更新）。</li></ol><hr><h2 id="五、扩展面试题与答案"><a href="#五、扩展面试题与答案" class="headerlink" title="五、扩展面试题与答案"></a><strong>五、扩展面试题与答案</strong></h2><h3 id="1-如何保证消息不丢失？"><a href="#1-如何保证消息不丢失？" class="headerlink" title="1. 如何保证消息不丢失？"></a><strong>1. 如何保证消息不丢失？</strong></h3><ul><li><strong>答案</strong>：<ul><li>持久化队列和消息。</li><li>生产者开启确认机制（Publisher Confirm）。</li><li>消费者手动 Ack。</li></ul></li></ul><h3 id="2-如何处理消息重复消费？"><a href="#2-如何处理消息重复消费？" class="headerlink" title="2. 如何处理消息重复消费？"></a><strong>2. 如何处理消息重复消费？</strong></h3><ul><li><strong>答案</strong>：<ul><li>使用数据库唯一索引或 Redis 记录已消费消息的唯一 ID。</li><li>幂等性设计（如订单支付状态检查）。</li></ul></li></ul><h3 id="3-什么是消息积压？如何解决？"><a href="#3-什么是消息积压？如何解决？" class="headerlink" title="3. 什么是消息积压？如何解决？"></a><strong>3. 什么是消息积压？如何解决？</strong></h3><ul><li><strong>答案</strong>：<ul><li><strong>原因</strong>：消费者处理速度低于生产速度。</li><li><strong>解决方案</strong>：<ul><li>增加消费者实例（水平扩展）。</li><li>优化消费者处理逻辑。</li><li>临时扩容队列或增加分区。</li></ul></li></ul></li></ul><h3 id="4-RabbitMQ-与-Kafka-的区别？"><a href="#4-RabbitMQ-与-Kafka-的区别？" class="headerlink" title="4. RabbitMQ 与 Kafka 的区别？"></a><strong>4. RabbitMQ 与 Kafka 的区别？</strong></h3><ul><li><strong>答案</strong>：<ul><li><strong>RabbitMQ</strong>：低延迟、灵活路由，适合传统消息队列场景。</li><li><strong>Kafka</strong>：高吞吐、持久化日志，适合大数据流处理。</li></ul></li></ul><hr><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a><strong>六、总结</strong></h2><p>RabbitMQ 通过丰富的消息模型和可靠的机制，成为分布式系统中不可或缺的组件。掌握其核心原理、高级特性及实际应用场景，可有效提升系统设计能力。结合 Spring Boot 或 Spring Cloud Stream 可进一步简化集成。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程题：多线程任务处理</title>
      <link href="/simonzzz/2025/04/22/ask/threadArrange/"/>
      <url>/simonzzz/2025/04/22/ask/threadArrange/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目-1-批量任务处理系统"><a href="#题目-1-批量任务处理系统" class="headerlink" title="题目 1: 批量任务处理系统"></a><strong>题目 1: 批量任务处理系统</strong></h3><h4 id="背景描述"><a href="#背景描述" class="headerlink" title="背景描述"></a><strong>背景描述</strong></h4><p>某电商平台需要定期生成一份销售报告。生成报告的过程分为以下几个步骤：</p><ol><li>系统会从数据库中提取一批订单数据（假设共有 5 笔订单）。</li><li>每笔订单需要单独计算其销售额和利润（这些计算过程可以并行进行，每笔订单的计算时间随机，范围为 1~3 秒）。</li><li>只有当所有订单的计算完成后，系统才能汇总结果并生成最终的销售报告。</li></ol><h4 id="具体要求"><a href="#具体要求" class="headerlink" title="具体要求"></a><strong>具体要求</strong></h4><ol><li>设计一个程序模拟上述流程，确保所有订单的计算任务都能正确完成。</li><li>在所有订单计算完成后，系统应打印一条消息，例如 <code>&quot;Sales report generated successfully!&quot;</code>。</li><li>确保程序能够高效运行，避免资源浪费或任务遗漏。</li></ol><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a><strong>提示</strong></h4><ul><li>考虑如何让主程序知道所有订单的计算任务已经完成。</li><li>需要注意并发环境下的数据一致性问题。</li></ul><h4 id="示例输出"><a href="#示例输出" class="headerlink" title="示例输出"></a><strong>示例输出</strong></h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Processing <span class="keyword">order</span> <span class="title">1</span>...</span><br><span class="line">Processing <span class="keyword">order</span> <span class="title">2</span>...</span><br><span class="line">Processing <span class="keyword">order</span> <span class="title">3</span>...</span><br><span class="line">Processing <span class="keyword">order</span> <span class="title">4</span>...</span><br><span class="line">Processing <span class="keyword">order</span> <span class="title">5</span>...</span><br><span class="line"><span class="keyword">Order</span> <span class="title">1</span> processed.</span><br><span class="line"><span class="keyword">Order</span> <span class="title">3</span> processed.</span><br><span class="line"><span class="keyword">Order</span> <span class="title">2</span> processed.</span><br><span class="line"><span class="keyword">Order</span> <span class="title">5</span> processed.</span><br><span class="line"><span class="keyword">Order</span> <span class="title">4</span> processed.</span><br><span class="line">Sales report generated successfully!</span><br></pre></td></tr></table></figure><hr><h3 id="题目-2-多阶段科研实验模拟"><a href="#题目-2-多阶段科研实验模拟" class="headerlink" title="题目 2: 多阶段科研实验模拟"></a><strong>题目 2: 多阶段科研实验模拟</strong></h3><h4 id="背景描述-1"><a href="#背景描述-1" class="headerlink" title="背景描述"></a><strong>背景描述</strong></h4><p>某科研团队正在进行一项多阶段的实验研究。实验分为三个阶段，每个阶段都需要多名研究人员协作完成。具体规则如下：</p><ol><li>每个研究人员需要依次完成三个阶段的任务（每个阶段的任务耗时随机，范围为 1~2 秒）。</li><li>在每个阶段结束时，所有研究人员必须等待其他成员完成当前阶段的任务后，才能进入下一个阶段。</li><li>实验结束后，每个研究人员需要提交自己的实验结果。</li></ol><h4 id="具体要求-1"><a href="#具体要求-1" class="headerlink" title="具体要求"></a><strong>具体要求</strong></h4><ol><li>假设有 4 名研究人员参与实验。</li><li>模拟整个实验过程，确保所有研究人员按照规则完成任务。</li><li>在每个阶段结束时，打印一条消息，例如 <code>&quot;Phase X completed by all researchers&quot;</code>。</li><li>实验结束后，每位研究人员打印一条消息，例如 <code>&quot;Researcher-X has submitted the results&quot;</code>。</li></ol><h4 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a><strong>提示</strong></h4><ul><li>考虑如何确保研究人员在每个阶段都能同步协作。</li><li>注意避免某些研究人员提前进入下一阶段的情况。</li></ul><h4 id="示例输出-1"><a href="#示例输出-1" class="headerlink" title="示例输出"></a><strong>示例输出</strong></h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Researcher</span> <span class="number">1</span> is working <span class="literal">on</span> Phase <span class="number">1</span>...</span><br><span class="line"><span class="attribute">Researcher</span> <span class="number">2</span> is working <span class="literal">on</span> Phase <span class="number">1</span>...</span><br><span class="line"><span class="attribute">Researcher</span> <span class="number">3</span> is working <span class="literal">on</span> Phase <span class="number">1</span>...</span><br><span class="line"><span class="attribute">Researcher</span> <span class="number">4</span> is working <span class="literal">on</span> Phase <span class="number">1</span>...</span><br><span class="line"><span class="attribute">Phase</span> <span class="number">1</span> completed by <span class="literal">all</span> researchers</span><br><span class="line"><span class="attribute">Researcher</span> <span class="number">1</span> is working <span class="literal">on</span> Phase <span class="number">2</span>...</span><br><span class="line"><span class="attribute">Researcher</span> <span class="number">2</span> is working <span class="literal">on</span> Phase <span class="number">2</span>...</span><br><span class="line"><span class="attribute">Researcher</span> <span class="number">3</span> is working <span class="literal">on</span> Phase <span class="number">2</span>...</span><br><span class="line"><span class="attribute">Researcher</span> <span class="number">4</span> is working <span class="literal">on</span> Phase <span class="number">2</span>...</span><br><span class="line"><span class="attribute">Phase</span> <span class="number">2</span> completed by <span class="literal">all</span> researchers</span><br><span class="line"><span class="attribute">Researcher</span> <span class="number">1</span> is working <span class="literal">on</span> Phase <span class="number">3</span>...</span><br><span class="line"><span class="attribute">Researcher</span> <span class="number">2</span> is working <span class="literal">on</span> Phase <span class="number">3</span>...</span><br><span class="line"><span class="attribute">Researcher</span> <span class="number">3</span> is working <span class="literal">on</span> Phase <span class="number">3</span>...</span><br><span class="line"><span class="attribute">Researcher</span> <span class="number">4</span> is working <span class="literal">on</span> Phase <span class="number">3</span>...</span><br><span class="line"><span class="attribute">Phase</span> <span class="number">3</span> completed by <span class="literal">all</span> researchers</span><br><span class="line"><span class="attribute">Researcher</span> <span class="number">1</span> has submitted the results</span><br><span class="line"><span class="attribute">Researcher</span> <span class="number">2</span> has submitted the results</span><br><span class="line"><span class="attribute">Researcher</span> <span class="number">3</span> has submitted the results</span><br><span class="line"><span class="attribute">Researcher</span> <span class="number">4</span> has submitted the results</span><br></pre></td></tr></table></figure><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>这两个题目分别模拟了批量任务处理和多阶段协作的实际业务场景，用户可以根据需求自行选择合适的同步机制（如 <code>CountDownLatch</code> 或 <code>CyclicBarrier</code>）。这种设计方式更贴近实际项目开发中的需求分析与解决方案设计流程，有助于培养用户解决实际问题的能力。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试官问：请问在你的项目中如何使用的线程池</title>
      <link href="/simonzzz/2025/04/22/skills/interview/interview/"/>
      <url>/simonzzz/2025/04/22/skills/interview/interview/</url>
      
        <content type="html"><![CDATA[<h3 id="业务场景：金融交易处理系统"><a href="#业务场景：金融交易处理系统" class="headerlink" title="业务场景：金融交易处理系统"></a>业务场景：金融交易处理系统</h3><h4 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h4><p>假设我们正在开发一个金融交易处理系统，系统需要处理大量的交易请求，例如股票交易、转账、支付等。每个交易请求需要执行一些短生命周期的任务，例如验证交易信息、计算交易金额、更新账户余额、通知用户等。由于交易请求的数量较大且每个任务的执行时间较短，使用 <code>CachedThreadPool</code> 可以有效地管理和复用线程，减少线程创建和销毁的开销，提高系统的性能和响应速度。</p><p>此外，为了确保每个交易请求的线程安全性和数据隔离性，我们将使用 <code>ThreadLocal</code> 来存储每个线程的上下文信息。为了同步多个任务的完成，我们将使用 <code>CountDownLatch</code> 来等待所有任务完成。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> basic.multipleThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinancialTransactionSystem</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ExecutorService cachedThreadPool;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FinancialTransactionSystem</span><span class="params">(<span class="type">int</span> numberOfTasks)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个可缓存的线程池</span></span><br><span class="line">        <span class="built_in">this</span>.cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="comment">// 初始化 CountDownLatch</span></span><br><span class="line">        <span class="built_in">this</span>.latch = <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(numberOfTasks);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTransaction</span><span class="params">(Transaction transaction)</span> &#123;</span><br><span class="line">        <span class="comment">// 提交交易验证任务</span></span><br><span class="line">        cachedThreadPool.submit(<span class="keyword">new</span> <span class="title class_">TransactionValidator</span>(transaction, latch));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交交易计算金额任务</span></span><br><span class="line">        cachedThreadPool.submit(<span class="keyword">new</span> <span class="title class_">TransactionCalculator</span>(transaction, latch));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交交易更新账户余额任务</span></span><br><span class="line">        cachedThreadPool.submit(<span class="keyword">new</span> <span class="title class_">TransactionUpdater</span>(transaction, latch));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交交易通知用户任务</span></span><br><span class="line">        cachedThreadPool.submit(<span class="keyword">new</span> <span class="title class_">TransactionNotifier</span>(transaction, latch));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 等待所有任务完成</span></span><br><span class="line">            latch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">            System.err.println(<span class="string">&quot;Main thread was interrupted: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭线程池</span></span><br><span class="line">            cachedThreadPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numberOfTasks</span> <span class="operator">=</span> <span class="number">40</span>; <span class="comment">// 每个交易有4个任务</span></span><br><span class="line">        <span class="type">FinancialTransactionSystem</span> <span class="variable">transactionSystem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FinancialTransactionSystem</span>(numberOfTasks);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟处理多个交易</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">Transaction</span> <span class="variable">transaction</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Transaction</span>(i);</span><br><span class="line">            transactionSystem.processTransaction(transaction);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        transactionSystem.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交易类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Transaction</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> transactionId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Transaction</span><span class="params">(<span class="type">int</span> transactionId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.transactionId = transactionId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTransactionId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> transactionId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 ThreadLocal 存储每个线程的上下文信息</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TransactionContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; transactionId = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setTransactionId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        transactionId.set(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getTransactionId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> transactionId.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">clearTransactionId</span><span class="params">()</span> &#123;</span><br><span class="line">        transactionId.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交易验证任务</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TransactionValidator</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Transaction transaction;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TransactionValidator</span><span class="params">(Transaction transaction, CountDownLatch latch)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.transaction = transaction;</span><br><span class="line">        <span class="built_in">this</span>.latch = latch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TransactionContext.setTransactionId(String.valueOf(transaction.getTransactionId()));</span><br><span class="line">            System.out.println(<span class="string">&quot;TransactionValidator is running for transaction ID: &quot;</span> + TransactionContext.getTransactionId());</span><br><span class="line">            <span class="comment">// 模拟验证逻辑</span></span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">            System.err.println(<span class="string">&quot;TransactionValidator was interrupted: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            TransactionContext.clearTransactionId();</span><br><span class="line">            latch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交易计算金额任务</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TransactionCalculator</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Transaction transaction;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TransactionCalculator</span><span class="params">(Transaction transaction, CountDownLatch latch)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.transaction = transaction;</span><br><span class="line">        <span class="built_in">this</span>.latch = latch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TransactionContext.setTransactionId(String.valueOf(transaction.getTransactionId()));</span><br><span class="line">            System.out.println(<span class="string">&quot;TransactionCalculator is running for transaction ID: &quot;</span> + TransactionContext.getTransactionId());</span><br><span class="line">            <span class="comment">// 模拟计算金额逻辑</span></span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">            System.err.println(<span class="string">&quot;TransactionCalculator was interrupted: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            TransactionContext.clearTransactionId();</span><br><span class="line">            latch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交易更新账户余额任务</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TransactionUpdater</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Transaction transaction;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TransactionUpdater</span><span class="params">(Transaction transaction, CountDownLatch latch)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.transaction = transaction;</span><br><span class="line">        <span class="built_in">this</span>.latch = latch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TransactionContext.setTransactionId(String.valueOf(transaction.getTransactionId()));</span><br><span class="line">            System.out.println(<span class="string">&quot;TransactionUpdater is running for transaction ID: &quot;</span> + TransactionContext.getTransactionId());</span><br><span class="line">            <span class="comment">// 模拟更新账户余额逻辑</span></span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">            System.err.println(<span class="string">&quot;TransactionUpdater was interrupted: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            TransactionContext.clearTransactionId();</span><br><span class="line">            latch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交易通知用户任务</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TransactionNotifier</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Transaction transaction;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TransactionNotifier</span><span class="params">(Transaction transaction, CountDownLatch latch)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.transaction = transaction;</span><br><span class="line">        <span class="built_in">this</span>.latch = latch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TransactionContext.setTransactionId(String.valueOf(transaction.getTransactionId()));</span><br><span class="line">            System.out.println(<span class="string">&quot;TransactionNotifier is running for transaction ID: &quot;</span> + TransactionContext.getTransactionId());</span><br><span class="line">            <span class="comment">// 模拟通知用户逻辑</span></span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">            System.err.println(<span class="string">&quot;TransactionNotifier was interrupted: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            TransactionContext.clearTransactionId();</span><br><span class="line">            latch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a>详细过程</h3><ol><li><p><strong>创建线程池和 CountDownLatch</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line"><span class="built_in">this</span>.latch = <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(numberOfTasks);</span><br></pre></td></tr></table></figure><p>这行代码创建了一个可缓存的线程池，并初始化了一个 <code>CountDownLatch</code>，用于等待所有任务完成。</p></li><li><p><strong>提交任务</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cachedThreadPool.submit(<span class="keyword">new</span> <span class="title class_">TransactionValidator</span>(transaction, latch));</span><br><span class="line">cachedThreadPool.submit(<span class="keyword">new</span> <span class="title class_">TransactionCalculator</span>(transaction, latch));</span><br><span class="line">cachedThreadPool.submit(<span class="keyword">new</span> <span class="title class_">TransactionUpdater</span>(transaction, latch));</span><br><span class="line">cachedThreadPool.submit(<span class="keyword">new</span> <span class="title class_">TransactionNotifier</span>(transaction, latch));</span><br></pre></td></tr></table></figure><p>这里提交了四种不同类型的线程任务：<code>TransactionValidator</code>（验证交易信息）、<code>TransactionCalculator</code>（计算交易金额）、<code>TransactionUpdater</code>（更新账户余额）和 <code>TransactionNotifier</code>（通知用户）。每个任务都实现了 <code>Runnable</code> 接口，并传递了 <code>CountDownLatch</code> 实例。</p></li><li><p><strong>任务执行</strong>：</p><ul><li><code>TransactionValidator</code>：验证交易信息。</li><li><code>TransactionCalculator</code>：计算交易金额。</li><li><code>TransactionUpdater</code>：更新账户余额。</li><li><code>TransactionNotifier</code>：通知用户交易状态。</li></ul></li><li><p>**使用 <code>ThreadLocal</code>**：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TransactionContext.setTransactionId(String.valueOf(transaction.getTransactionId()));</span><br><span class="line">System.out.println(<span class="string">&quot;TransactionValidator is running for transaction ID: &quot;</span> + TransactionContext.getTransactionId());</span><br></pre></td></tr></table></figure><p>在每个任务的 <code>run</code> 方法中，使用 <code>ThreadLocal</code> 存储和获取当前线程的交易 ID，确保每个线程的上下文信息独立且安全。</p></li><li><p>**使用 <code>CountDownLatch</code>**：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">latch.countDown();</span><br></pre></td></tr></table></figure><p>在每个任务的 <code>finally</code> 块中调用 <code>latch.countDown()</code>，表示一个任务已完成。在 <code>main</code> 方法中调用 <code>latch.await()</code>，等待所有任务完成。</p></li><li><p><strong>关闭线程池</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cachedThreadPool.shutdown();</span><br></pre></td></tr></table></figure><p>在 <code>finally</code> 块中调用 <code>shutdown()</code> 方法，确保线程池在任务完成后被正确关闭，释放资源。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过上述示例，展示了如何在金融交易处理系统中使用 <code>CachedThreadPool</code> 来处理大量短生命周期的任务，并结合 <code>ThreadLocal</code> 和 <code>CountDownLatch</code> 来确保线程安全性和任务同步。具体优化点包括：</p><ul><li><strong>线程池管理</strong>：使用 <code>CachedThreadPool</code> 管理线程，减少线程创建和销毁的开销。</li><li><strong>线程安全</strong>：使用 <code>ThreadLocal</code> 存储每个线程的上下文信息，确保数据隔离。</li><li><strong>任务同步</strong>：使用 <code>CountDownLatch</code> 等待所有任务完成，确保主线程在所有任务完成后才继续执行。</li></ul><p>这种设计有助于确保金融系统的稳定性和高效性，特别是在高并发的情况下。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用大模型实现公司业务的自动化</title>
      <link href="/simonzzz/2025/04/20/AI/howtomakeayewuxian/"/>
      <url>/simonzzz/2025/04/20/AI/howtomakeayewuxian/</url>
      
        <content type="html"><![CDATA[<h3 id="一、技术栈选择"><a href="#一、技术栈选择" class="headerlink" title="一、技术栈选择"></a><strong>一、技术栈选择</strong></h3><h4 id="1-基础技术框架"><a href="#1-基础技术框架" class="headerlink" title="1. 基础技术框架"></a>1. <strong>基础技术框架</strong></h4><ul><li><strong>大模型平台</strong>：<ul><li><strong>开源模型</strong>：LLaMA、Falcon、Stable Diffusion（根据业务类型选择）。</li><li><strong>闭源模型</strong>：阿里云通义千问、百度文心一言、OpenAI GPT 系列（通过 API 调用）。</li></ul></li><li><strong>开发工具</strong>：<ul><li><strong>模型训练</strong>：Hugging Face Transformers、PyTorch、TensorFlow。</li><li><strong>部署工具</strong>：FastAPI（API 服务）、Docker（容器化）、Kubernetes（集群管理）。</li><li><strong>低代码平台</strong>：阿里云百炼、百度AI Studio（适合快速开发）。</li></ul></li></ul><h4 id="2-数据相关技术"><a href="#2-数据相关技术" class="headerlink" title="2. 数据相关技术"></a>2. <strong>数据相关技术</strong></h4><ul><li><strong>数据预处理</strong>：Pandas（数据清洗）、NLTK&#x2F;Spacy（文本处理）、OpenCV（图像处理）。</li><li><strong>数据标注工具</strong>：Label Studio、CVAT（用于标注训练数据）。</li><li><strong>数据存储</strong>：MySQL&#x2F;MongoDB（结构化数据）、Elasticsearch（日志&#x2F;非结构化数据）。</li></ul><h4 id="3-模型优化技术"><a href="#3-模型优化技术" class="headerlink" title="3. 模型优化技术"></a>3. <strong>模型优化技术</strong></h4><ul><li><strong>微调（Fine-tuning）</strong>：LoRA、P-Tuning、全量微调。</li><li><strong>模型压缩</strong>：量化（8-bit&#x2F;4-bit）、剪枝、蒸馏（Distillation）。</li><li><strong>推理加速</strong>：ONNX Runtime、TensorRT、vLLM。</li></ul><hr><h3 id="二、训练公司业务模型的步骤"><a href="#二、训练公司业务模型的步骤" class="headerlink" title="二、训练公司业务模型的步骤"></a><strong>二、训练公司业务模型的步骤</strong></h3><h4 id="1-明确业务场景"><a href="#1-明确业务场景" class="headerlink" title="1. 明确业务场景"></a>1. <strong>明确业务场景</strong></h4><ul><li><strong>需求分析</strong>：确定需要替换人工的具体环节（如客服对话、数据录入、报告生成、图像识别等）。</li><li><strong>任务类型</strong>：<ul><li><strong>文本生成</strong>：如自动生成邮件、报告、代码。</li><li><strong>分类&#x2F;识别</strong>：如客户意图识别、票据分类。</li><li><strong>对话理解</strong>：如智能客服、语音助手。</li><li><strong>多模态任务</strong>：如图像描述生成、视频内容分析。</li></ul></li></ul><h4 id="2-数据准备"><a href="#2-数据准备" class="headerlink" title="2. 数据准备"></a>2. <strong>数据准备</strong></h4><ul><li><strong>数据收集</strong>：<ul><li>从公司内部系统（如 CRM、ERP）导出历史数据。</li><li>收集人工操作的标注数据（如客服对话记录、标注过的图片）。</li></ul></li><li><strong>数据清洗</strong>：<ul><li>去除噪声（重复、错误、无关数据）。</li><li>统一格式（如时间戳、文本编码）。</li></ul></li><li><strong>数据标注</strong>：<ul><li>对无标签数据进行人工标注（如分类标签、实体标注）。</li><li>使用半自动标注工具（如主动学习）减少人工成本。</li></ul></li></ul><h4 id="3-模型选择与训练"><a href="#3-模型选择与训练" class="headerlink" title="3. 模型选择与训练"></a>3. <strong>模型选择与训练</strong></h4><ul><li><strong>预训练模型选择</strong>：<ul><li><strong>文本任务</strong>：Qwen、GPT-3.5、Llama-2。</li><li><strong>图像任务</strong>：Stable Diffusion、ResNet。</li><li><strong>多模态任务</strong>：CLIP、OFA。</li></ul></li><li><strong>模型微调</strong>：<ul><li><strong>全量微调</strong>：使用公司数据对模型进行全量参数更新（资源消耗大）。</li><li><strong>高效微调</strong>：使用 LoRA 或 P-Tuning（仅训练部分参数，节省资源）。</li><li><strong>示例代码（Hugging Face）</strong>：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoModelForSequenceClassification, Trainer, TrainingArguments</span><br><span class="line"></span><br><span class="line">model = AutoModelForSequenceClassification.from_pretrained(<span class="string">&quot;bert-base-uncased&quot;</span>)</span><br><span class="line">training_args = TrainingArguments(output_dir=<span class="string">&quot;./results&quot;</span>, per_device_train_batch_size=<span class="number">16</span>)</span><br><span class="line">trainer = Trainer(model=model, args=training_args, train_dataset=train_dataset)</span><br><span class="line">trainer.train()</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="4-模型评估与优化"><a href="#4-模型评估与优化" class="headerlink" title="4. 模型评估与优化"></a>4. <strong>模型评估与优化</strong></h4><ul><li><strong>评估指标</strong>：<ul><li>文本生成：BLEU、ROUGE、人工评分。</li><li>分类任务：准确率、F1 Score。</li><li>时延与吞吐量：TPS（每秒处理事务数）、响应时间。</li></ul></li><li><strong>优化方法</strong>：<ul><li><strong>模型压缩</strong>：使用量化（如 <code>bitsandbytes</code> 库）减少模型体积。</li><li><strong>缓存机制</strong>：对高频查询缓存结果（如 Redis）。</li><li><strong>并行推理</strong>：使用多 GPU 或分布式推理（如 vLLM）。</li></ul></li></ul><hr><h3 id="三、模型部署与业务集成"><a href="#三、模型部署与业务集成" class="headerlink" title="三、模型部署与业务集成"></a><strong>三、模型部署与业务集成</strong></h3><h4 id="1-部署方式"><a href="#1-部署方式" class="headerlink" title="1. 部署方式"></a>1. <strong>部署方式</strong></h4><ul><li><strong>API 服务</strong>：<ul><li>使用 FastAPI 或 Flask 封装模型为 RESTful API。</li><li>示例代码（FastAPI）：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> pipeline</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line">model = pipeline(<span class="string">&quot;text-generation&quot;</span>, model=<span class="string">&quot;your-finetuned-model&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/generate&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_text</span>(<span class="params">prompt: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">return</span> model(prompt)</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>私有化部署</strong>：<ul><li>使用 Docker 容器化部署，结合 Kubernetes 管理集群。</li><li>部署到本地服务器或私有云（如阿里云专有云）。</li></ul></li></ul><h4 id="2-与业务系统集成"><a href="#2-与业务系统集成" class="headerlink" title="2. 与业务系统集成"></a>2. <strong>与业务系统集成</strong></h4><ul><li><strong>触发方式</strong>：<ul><li>实时调用：通过 API 直接与业务系统（如 CRM、ERP）对接。</li><li>批量处理：定时任务（如 Airflow）调用模型处理批量数据。</li></ul></li><li><strong>日志与监控</strong>：<ul><li>使用 Prometheus + Grafana 监控模型性能。</li><li>记录请求日志，用于后续分析与优化。</li></ul></li></ul><hr><h3 id="四、替换人工的关键挑战与解决方案"><a href="#四、替换人工的关键挑战与解决方案" class="headerlink" title="四、替换人工的关键挑战与解决方案"></a><strong>四、替换人工的关键挑战与解决方案</strong></h3><h4 id="1-数据安全与隐私"><a href="#1-数据安全与隐私" class="headerlink" title="1. 数据安全与隐私"></a>1. <strong>数据安全与隐私</strong></h4><ul><li><strong>挑战</strong>：公司数据可能包含敏感信息（如客户资料、财务数据）。</li><li><strong>解决方案</strong>：<ul><li>数据脱敏：对敏感字段（如身份证号、电话号码）进行掩码处理。</li><li>私有化部署：模型和数据均部署在公司内网，避免外传。</li></ul></li></ul><h4 id="2-模型鲁棒性"><a href="#2-模型鲁棒性" class="headerlink" title="2. 模型鲁棒性"></a>2. <strong>模型鲁棒性</strong></h4><ul><li><strong>挑战</strong>：模型可能在长尾场景（如罕见问题）表现不佳。</li><li><strong>解决方案</strong>：<ul><li>增加兜底逻辑：对模型无法处理的请求，自动转人工或返回默认答案。</li><li>持续学习：定期用新数据重新训练模型。</li></ul></li></ul><h4 id="3-成本控制"><a href="#3-成本控制" class="headerlink" title="3. 成本控制"></a>3. <strong>成本控制</strong></h4><ul><li><strong>挑战</strong>：大模型推理成本高（尤其是闭源模型 API）。</li><li><strong>解决方案</strong>：<ul><li>使用轻量级模型（如 DistilBERT）。</li><li>按需调用：仅对关键任务调用大模型，其他任务使用规则引擎或小模型。</li></ul></li></ul><hr><h3 id="五、成功案例参考"><a href="#五、成功案例参考" class="headerlink" title="五、成功案例参考"></a><strong>五、成功案例参考</strong></h3><ol><li><p><strong>智能客服</strong>：</p><ul><li><strong>场景</strong>：替换人工客服，自动回答用户问题。</li><li><strong>技术</strong>：使用 Qwen 或 GPT-3.5 微调，结合对话历史和知识库。</li><li><strong>效果</strong>：响应时间缩短至秒级，人工替代率提升 70%。</li></ul></li><li><p><strong>自动化报告生成</strong>：</p><ul><li><strong>场景</strong>：根据销售数据自动生成日报、周报。</li><li><strong>技术</strong>：使用 T5 或 BART 模型，输入结构化数据输出自然语言文本。</li><li><strong>效果</strong>：报告生成时间从小时级缩短至分钟级。</li></ul></li><li><p><strong>图像质检</strong>：</p><ul><li><strong>场景</strong>：工厂流水线产品缺陷检测。</li><li><strong>技术</strong>：使用 YOLOv8 或 Faster R-CNN 模型，结合少量标注数据微调。</li><li><strong>效果</strong>：检测准确率提升至 98%，人工复检率降低 90%。</li></ul></li></ol><hr><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a><strong>六、总结</strong></h3><ol><li><strong>技术路径</strong>：<br>数据准备 → 模型微调 → 部署为 API → 与业务系统集成 → 持续优化。</li><li><strong>关键点</strong>：  <ul><li>优先使用开源模型+微调，而非从头训练。</li><li>私有化部署保障数据安全。</li><li>通过 A&#x2F;B 测试逐步替换人工，避免业务风险。</li></ul></li></ol><p>如果需要更具体的方案（如代码实现、部署细节），可以进一步说明业务场景！</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云南旅游攻略</title>
      <link href="/simonzzz/2025/04/20/havefun/%E4%BA%91%E5%8D%97%E6%97%85%E6%B8%B8%E6%94%BB%E7%95%A5/"/>
      <url>/simonzzz/2025/04/20/havefun/%E4%BA%91%E5%8D%97%E6%97%85%E6%B8%B8%E6%94%BB%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="第一天：城市人文与紫色浪漫"><a href="#第一天：城市人文与紫色浪漫" class="headerlink" title="第一天：城市人文与紫色浪漫"></a><strong>第一天：城市人文与紫色浪漫</strong></h3><h4 id="上午：蓝花楹大道（教场中路）"><a href="#上午：蓝花楹大道（教场中路）" class="headerlink" title="上午：蓝花楹大道（教场中路）"></a><strong>上午：蓝花楹大道（教场中路）</strong></h4><ul><li><strong>亮点</strong>：正值蓝花楹盛花期，教场中路约2公里的紫色花廊如瀑布倾泻，是昆明四月最浪漫的景观。<ul><li><strong>拍摄建议</strong>：清晨7点前到达，避开人潮，利用逆光拍摄花瓣的透明质感；可乘坐赏花专线巴士（25元&#x2F;人）俯瞰全景。</li><li><strong>周边活动</strong>：沿途涂鸦墙和特色市集可逛，推荐尝试蓝花楹主题雪糕。</li></ul></li></ul><h4 id="中午：昆明老街-文林街"><a href="#中午：昆明老街-文林街" class="headerlink" title="中午：昆明老街 &amp; 文林街"></a><strong>中午：昆明老街 &amp; 文林街</strong></h4><ul><li><strong>美食推荐</strong>：<ul><li><strong>过桥米线</strong>：老字号“建新园”或“福华园”，体验滚汤现烫的仪式感。</li><li><strong>小吃</strong>：官渡粑粑（眼镜粑粑店）、小锅米线（文林街小摊）。</li></ul></li><li><strong>文化体验</strong>：探访“东方书店”（1926年创办），二楼可边喝咖啡边赏街景。</li></ul><h4 id="下午：翠湖公园-云南陆军讲武堂"><a href="#下午：翠湖公园-云南陆军讲武堂" class="headerlink" title="下午：翠湖公园 &amp; 云南陆军讲武堂"></a><strong>下午：翠湖公园 &amp; 云南陆军讲武堂</strong></h4><ul><li><strong>翠湖公园</strong>：漫步湖心亭、九曲桥，感受春城慢生活；若天气晴好，可偶遇零星的晚归海鸥。</li><li><strong>陆军讲武堂</strong>：免费参观黄墙红窗的民国建筑，整点有换岗仪式表演，适合拍摄复古风格照片。</li></ul><h4 id="傍晚：滇池海埂大坝"><a href="#傍晚：滇池海埂大坝" class="headerlink" title="傍晚：滇池海埂大坝"></a><strong>傍晚：滇池海埂大坝</strong></h4><ul><li><strong>活动</strong>：骑行或散步，欣赏滇池落日余晖；若时间充裕，可乘缆车横跨滇池至西山俯瞰全景。</li></ul><h4 id="晚上：南屏步行街夜市"><a href="#晚上：南屏步行街夜市" class="headerlink" title="晚上：南屏步行街夜市"></a><strong>晚上：南屏步行街夜市</strong></h4><ul><li><strong>推荐</strong>：傣味舂鸡脚、昭通小肉串、烤乳扇，搭配木瓜水解腻。</li><li><strong>夜景观赏</strong>：金马碧鸡坊灯光璀璨，适合打卡拍照。</li></ul><hr><h3 id="第二天：自然风光与花海盛宴"><a href="#第二天：自然风光与花海盛宴" class="headerlink" title="第二天：自然风光与花海盛宴"></a><strong>第二天：自然风光与花海盛宴</strong></h3><h4 id="上午：西山森林公园-龙门石窟"><a href="#上午：西山森林公园-龙门石窟" class="headerlink" title="上午：西山森林公园 &amp; 龙门石窟"></a><strong>上午：西山森林公园 &amp; 龙门石窟</strong></h4><ul><li><strong>玩法</strong>：<ul><li><strong>缆车体验</strong>：乘滇池索道横跨湖面，俯瞰滇池与市区全景。</li><li><strong>登山路线</strong>：龙门景区徒步（约2小时），登顶俯瞰“睡美人”山与滇池相映成趣。</li></ul></li><li><strong>美食</strong>：山脚茶马花街品尝烤乳扇、稀豆粉。</li></ul><h4 id="中午：云南民族村"><a href="#中午：云南民族村" class="headerlink" title="中午：云南民族村"></a><strong>中午：云南民族村</strong></h4><ul><li><strong>特色</strong>：体验傣族泼水节活动（四月正值傣历新年），观看《阿诗玛》实景歌舞，品尝哈尼族长街宴。</li></ul><h4 id="下午：斗南花市-捞鱼河湿地公园"><a href="#下午：斗南花市-捞鱼河湿地公园" class="headerlink" title="下午：斗南花市 &amp; 捞鱼河湿地公园"></a><strong>下午：斗南花市 &amp; 捞鱼河湿地公园</strong></h4><ul><li><strong>斗南花市</strong>：亚洲最大鲜花交易市场，下午5-6点为卸货高峰期，可低价购入玫瑰、百合等，推荐多肉区和文创手信馆。</li><li><strong>捞鱼河湿地</strong>：傍晚划透明小船穿行水杉林，欣赏滇池日落，四月底或有余留的郁金香花海。</li></ul><h4 id="返程前晚餐：野生菌火锅"><a href="#返程前晚餐：野生菌火锅" class="headerlink" title="返程前晚餐：野生菌火锅"></a><strong>返程前晚餐：野生菌火锅</strong></h4><ul><li><strong>推荐餐厅</strong>：“滇菌王”或“一朵菌”，必点鸡枞、松茸、牛肝菌，搭配汽锅鸡汤底。</li></ul><hr><h3 id="住宿推荐"><a href="#住宿推荐" class="headerlink" title="住宿推荐"></a><strong>住宿推荐</strong></h3><ul><li><strong>翠湖周边</strong>：如“翠湖宾馆”，步行可达公园、讲武堂，方便感受老城韵味。</li><li><strong>南屏街商圈</strong>：如“昆明中心皇冠假日酒店”，毗邻夜市，购物餐饮便利。</li></ul><hr><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><ol><li><strong>防晒与保暖</strong>：昆明紫外线强，需备防晒霜、墨镜；早晚温差大，建议携带薄外套。</li><li><strong>交通</strong>：地铁4号线直达斗南花市（金桂街站），市区景点建议打车或共享单车。</li><li><strong>花期提示</strong>：蓝花楹最佳拍摄时间为清晨或傍晚，教场中路周末人流密集，建议早到。</li></ol><hr><h2 id="乘车路线"><a href="#乘车路线" class="headerlink" title="乘车路线"></a>乘车路线</h2><h3 id="第一天：城市人文与紫色浪漫-1"><a href="#第一天：城市人文与紫色浪漫-1" class="headerlink" title="第一天：城市人文与紫色浪漫"></a>第一天：城市人文与紫色浪漫</h3><hr><p> 上午（4月26日）</p><ol><li>住宿出发 → 教场中路蓝花楹大道  <ul><li>交通：地铁3号线至「教场中路站」步行5分钟，或打车直达。  </li><li>活动：拍摄蓝花楹花海（建议7:00前到达，避开人流），品尝蓝花楹雪糕。</li></ul></li><li>教场中路 → 昆明老街 &amp; 文林街  <ul><li>交通：步行或共享单车（约1.5公里）。  </li><li>活动：老街午餐（建新园过桥米线），文林街咖啡馆打卡，探访东方书店。<br>下午</li></ul></li><li>文林街 → 翠湖公园  <ul><li>交通：步行（约10分钟）。  </li><li>活动：翠湖漫步，喂海鸥（若遇晚归海鸥群），陆军讲武堂参观（注意换岗仪式时间）。</li></ul></li><li>翠湖公园 → 滇池海埂大坝  <ul><li>交通：地铁5号线至「滇池站」转公交K31路，或打车（约20分钟）。  </li><li>活动：骑行环湖，欣赏落日，可选缆车至西山。<br>傍晚</li></ul></li><li>滇池 → 南屏步行街夜市  <ul><li>交通：地铁5号线转1号线至「东风广场站」步行。  </li><li>活动：品尝夜市小吃（傣味鸡脚、烤乳扇），打卡金马碧鸡坊夜景。</li></ul></li></ol><h3 id="第二天：自然风光与花海盛宴-1"><a href="#第二天：自然风光与花海盛宴-1" class="headerlink" title="第二天：自然风光与花海盛宴"></a>第二天：自然风光与花海盛宴</h3><p>上午</p><ol><li>住宿出发 → 西山森林公园 &amp; 龙门石窟  <ul><li>交通：地铁3号线至「西山公园站」转缆车&#x2F;公交。  </li><li>活动：乘滇池索道上山，徒步龙门石窟，俯瞰滇池全景。</li></ul></li><li>西山 → 云南民族村  <ul><li>交通：缆车下山后打车（约15分钟）。  </li><li>活动：体验傣族泼水节（4月活动），观看歌舞表演，品尝长街宴。</li></ul></li></ol><p>下午</p><ol><li>民族村 → 斗南花市  <ul><li>交通：地铁4号线至「金桂街站」步行5分钟。  </li><li>活动：逛亚洲最大花市（下午5点后价格更优惠），购买鲜花和手信。</li></ul></li><li>斗南花市 → 捞鱼河湿地公园  <ul><li>交通：公交K31路或打车（约20分钟）。  </li><li>活动：划透明小船游水杉林，拍摄日落与滇池倒影，寻找郁金香花海。<br>返程前</li></ul></li><li>捞鱼河湿地 → 野生菌火锅餐厅  <ul><li>交通：打车至市区餐厅（推荐「滇菌王」或「一朵菌」）。  </li><li>晚餐：品尝新鲜菌火锅，结束行程后返回住宿。</li></ul></li></ol><p>路线图标注说明</p><ol><li>交通颜色：地铁（蓝色）· 公交（红色）· 打车&#x2F;缆车（橙色）· 步行&#x2F;骑行（绿色）  </li><li>关键节点：  <ul><li>住宿：推荐翠湖或南屏街附近，两天可住同一酒店。  </li><li>时间提醒：蓝花楹清晨拍最佳，斗南花市下午5点后更热闹。</li></ul></li><li>特别提示：  <ul><li>西山缆车需提前购票（节假日可能排队）；  </li><li>捞鱼河湿地日落约19:30，建议预留1小时拍摄时间。</li></ul></li></ol><h3 id="路线优势"><a href="#路线优势" class="headerlink" title="路线优势"></a>路线优势</h3><ul><li>景点串联高效：地铁+公交覆盖主要景点，避免反复折返。  </li><li>季节适配：突出4月蓝花楹、郁金香花海及傣历新年活动。  </li><li>灵活调整：若体力有限，可省略西山徒步，优先体验花市和湿地。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 旅游 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅游 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级Java开发必备技能点和复习计划</title>
      <link href="/simonzzz/2025/04/20/skills/interview/plan/"/>
      <url>/simonzzz/2025/04/20/skills/interview/plan/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、核心知识点（按重要性排序）"><a href="#一、核心知识点（按重要性排序）" class="headerlink" title="一、核心知识点（按重要性排序）"></a><strong>一、核心知识点（按重要性排序）</strong></h3><h4 id="1-Java核心"><a href="#1-Java核心" class="headerlink" title="1. Java核心"></a><strong>1. Java核心</strong></h4><ul><li><strong>集合框架</strong>（HashMap、ConcurrentHashMap、ArrayList、LinkedList、TreeMap、HashSet源码分析）</li><li><strong>多线程与并发</strong>（线程池、synchronized、volatile、CAS、AQS、ReentrantLock、ReadWriteLock）</li><li><strong>JVM</strong>（内存模型、GC算法、类加载机制、JVM调优、内存泄漏排查）</li><li><strong>IO&#x2F;NIO</strong>（BIO&#x2F;NIO&#x2F;AIO区别、Selector、Buffer、Channel）</li><li><strong>反射、注解、动态代理</strong></li></ul><h4 id="2-并发编程"><a href="#2-并发编程" class="headerlink" title="2. 并发编程"></a><strong>2. 并发编程</strong></h4><ul><li><strong>线程池</strong>（ThreadPoolExecutor参数、拒绝策略、Callable&#x2F;Future）</li><li><strong>并发工具类</strong>（CountDownLatch、CyclicBarrier、Semaphore、Exchanger）</li><li><strong>原子类</strong>（AtomicInteger、AtomicReference）</li><li><strong>ThreadLocal</strong>（内存泄漏问题）</li><li><strong>死锁检测与避免</strong></li></ul><h4 id="3-JVM"><a href="#3-JVM" class="headerlink" title="3. JVM"></a><strong>3. JVM</strong></h4><ul><li><strong>内存结构</strong>（堆、栈、方法区、元空间、直接内存）</li><li><strong>垃圾回收</strong>（GC算法、CMS&#x2F;G1&#x2F;ZGC原理、GC日志分析）</li><li><strong>类加载机制</strong>（双亲委派、自定义类加载器）</li><li><strong>JVM参数调优</strong>（堆内存分配、GC策略选择）</li></ul><h4 id="4-框架"><a href="#4-框架" class="headerlink" title="4. 框架"></a><strong>4. 框架</strong></h4><ul><li><strong>Spring</strong>（IoC、AOP、事务管理、循环依赖、Bean生命周期）</li><li><strong>Spring Boot</strong>（自动配置原理、Starter开发、Actuator）</li><li><strong>Spring Cloud</strong>（服务注册发现、配置中心、熔断器、网关）</li><li><strong>MyBatis</strong>（缓存机制、插件原理、动态SQL）</li><li><strong>Netty</strong>（Reactor模式、ChannelPipeline、ByteBuf）</li></ul><h4 id="5-数据库"><a href="#5-数据库" class="headerlink" title="5. 数据库"></a><strong>5. 数据库</strong></h4><ul><li><strong>SQL优化</strong>（索引原理、执行计划、慢查询优化）</li><li><strong>事务</strong>（ACID、隔离级别、MVCC、分布式事务）</li><li><strong>锁机制</strong>（行锁、表锁、乐观锁、悲观锁）</li><li><strong>分库分表</strong>（ShardingSphere、数据迁移、分布式ID）</li><li><strong>NoSQL</strong>（Redis数据结构、持久化、集群、缓存穿透&#x2F;雪崩）</li></ul><h4 id="6-分布式系统"><a href="#6-分布式系统" class="headerlink" title="6. 分布式系统"></a><strong>6. 分布式系统</strong></h4><ul><li><strong>CAP理论</strong>、<strong>BASE理论</strong></li><li><strong>一致性算法</strong>（Raft、Paxos）</li><li><strong>分布式事务</strong>（2PC、3PC、TCC、Saga）</li><li><strong>消息队列</strong>（Kafka、RocketMQ、RabbitMQ：消息可靠性、顺序性、重复消费）</li><li><strong>分布式锁</strong>（Redis&#x2F;ZooKeeper实现）</li><li><strong>微服务</strong>（服务治理、限流、熔断、降级）</li></ul><h4 id="7-设计模式"><a href="#7-设计模式" class="headerlink" title="7. 设计模式"></a><strong>7. 设计模式</strong></h4><ul><li><strong>创建型</strong>（单例、工厂、建造者）</li><li><strong>结构型</strong>（代理、适配器、装饰器）</li><li><strong>行为型</strong>（观察者、策略、模板方法）</li><li><strong>设计原则</strong>（SOLID、DRY、KISS）</li></ul><h4 id="8-系统设计"><a href="#8-系统设计" class="headerlink" title="8. 系统设计"></a><strong>8. 系统设计</strong></h4><ul><li><strong>高并发系统</strong>（限流、降级、缓存、异步）</li><li><strong>高可用系统</strong>（集群、负载均衡、灾备）</li><li><strong>一致性设计</strong>（最终一致性、补偿机制）</li><li><strong>经典案例</strong>（秒杀系统、短链生成、分布式缓存）</li></ul><h4 id="9-工具与中间件"><a href="#9-工具与中间件" class="headerlink" title="9. 工具与中间件"></a><strong>9. 工具与中间件</strong></h4><ul><li><strong>Redis</strong>（数据结构、集群、哨兵、Pipeline）</li><li><strong>ZooKeeper</strong>（选举机制、分布式锁、配置中心）</li><li><strong>Elasticsearch</strong>（倒排索引、分片、查询优化）</li><li><strong>Nginx</strong>（反向代理、负载均衡、动静分离）</li></ul><h4 id="10-算法与数据结构"><a href="#10-算法与数据结构" class="headerlink" title="10. 算法与数据结构"></a><strong>10. 算法与数据结构</strong></h4><ul><li><strong>LeetCode</strong>（高频题：链表、树、排序、动态规划）</li><li><strong>排序算法</strong>（快排、归并、堆排）</li><li><strong>复杂度分析</strong>（时间&#x2F;空间复杂度）</li></ul><h4 id="11-操作系统与网络"><a href="#11-操作系统与网络" class="headerlink" title="11. 操作系统与网络"></a><strong>11. 操作系统与网络</strong></h4><ul><li><strong>TCP&#x2F;IP</strong>（三次握手、四次挥手、滑动窗口）</li><li><strong>HTTP&#x2F;HTTPS</strong>（状态码、Header、HTTP2新特性）</li><li><strong>进程与线程</strong>（区别、通信方式）</li><li><strong>内存管理</strong>（虚拟内存、页面置换算法）</li></ul><hr><h3 id="二、复习计划（4周冲刺）"><a href="#二、复习计划（4周冲刺）" class="headerlink" title="二、复习计划（4周冲刺）"></a><strong>二、复习计划（4周冲刺）</strong></h3><h4 id="第1周：Java核心-并发编程"><a href="#第1周：Java核心-并发编程" class="headerlink" title="第1周：Java核心 + 并发编程"></a><strong>第1周：Java核心 + 并发编程</strong></h4><ul><li><strong>Day1-2</strong>：集合源码（HashMap、ConcurrentHashMap）</li><li><strong>Day3-4</strong>：线程池、CAS、AQS、ReentrantLock</li><li><strong>Day5-6</strong>：JVM内存模型、GC算法、类加载</li><li><strong>Day7</strong>：模拟面试题（Java基础）</li></ul><h4 id="第2周：框架-数据库"><a href="#第2周：框架-数据库" class="headerlink" title="第2周：框架 + 数据库"></a><strong>第2周：框架 + 数据库</strong></h4><ul><li><strong>Day8-9</strong>：Spring IoC&#x2F;AOP、循环依赖、事务</li><li><strong>Day10-11</strong>：MyBatis缓存、动态SQL</li><li><strong>Day12-13</strong>：SQL优化、索引原理、事务隔离</li><li><strong>Day14</strong>：模拟面试题（框架+数据库）</li></ul><h4 id="第3周：分布式系统-系统设计"><a href="#第3周：分布式系统-系统设计" class="headerlink" title="第3周：分布式系统 + 系统设计"></a><strong>第3周：分布式系统 + 系统设计</strong></h4><ul><li><strong>Day15-16</strong>：分布式事务、消息队列、分布式锁</li><li><strong>Day17-18</strong>：Redis持久化、集群、缓存问题</li><li><strong>Day19-20</strong>：系统设计案例（秒杀、短链）</li><li><strong>Day21</strong>：模拟面试题（分布式+设计）</li></ul><h4 id="第4周：算法-综合提升"><a href="#第4周：算法-综合提升" class="headerlink" title="第4周：算法 + 综合提升"></a><strong>第4周：算法 + 综合提升</strong></h4><ul><li><strong>Day22-24</strong>：刷高频算法题（LeetCode中等+困难）</li><li><strong>Day25-26</strong>：操作系统、网络基础</li><li><strong>Day27-28</strong>：项目复盘（技术难点、优化点）</li><li><strong>Day29-30</strong>：模拟面试（全流程）</li></ul><hr><h3 id="三、关键建议"><a href="#三、关键建议" class="headerlink" title="三、关键建议"></a><strong>三、关键建议</strong></h3><ol><li><strong>项目深挖</strong>：准备2-3个复杂项目，重点描述技术选型、难点、优化方案。</li><li><strong>源码阅读</strong>：至少精读一个框架源码（如Spring或MyBatis）。</li><li><strong>模拟面试</strong>：通过LeetCode、牛客网进行模拟，训练表达能力。</li><li><strong>高频问题</strong>：准备“为什么离开上家公司”、“职业规划”等软技能问题。</li></ol><hr><h3 id="四、资源推荐"><a href="#四、资源推荐" class="headerlink" title="四、资源推荐"></a><strong>四、资源推荐</strong></h3><ul><li><strong>书籍</strong>：《Java并发编程实战》《深入理解JVM》《设计模式之禅》</li><li><strong>网站</strong>：LeetCode、牛客网、极客时间</li><li><strong>工具</strong>：Arthas（JVM调试）、JProfiler（性能分析）</li></ul><p>如有需要更进之处还请评论区指点！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>怎么在github pages部署自己的hexo项目</title>
      <link href="/simonzzz/2025/04/20/skills/point/howToCreateHexoAtGithubPages/"/>
      <url>/simonzzz/2025/04/20/skills/point/howToCreateHexoAtGithubPages/</url>
      
        <content type="html"><![CDATA[<p>在 GitHub Pages 上部署 Hexo 项目是一个常见的需求，Hexo 是一个基于 Node.js 的静态博客生成器，而 GitHub Pages 是一个免费的静态网站托管服务。以下是详细的步骤，帮助你完成 Hexo 项目的部署。</p><hr><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p>确保你已经完成以下准备工作：</p><ul><li>安装 Node.js 和 npm。</li><li>安装 Git。</li><li>创建一个 GitHub 仓库（如果还没有）。</li></ul><hr><h3 id="2-安装-Hexo"><a href="#2-安装-Hexo" class="headerlink" title="2. 安装 Hexo"></a>2. 安装 Hexo</h3><p>如果你还没有安装 Hexo，可以通过以下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><hr><h3 id="3-初始化-Hexo-项目"><a href="#3-初始化-Hexo-项目" class="headerlink" title="3. 初始化 Hexo 项目"></a>3. 初始化 Hexo 项目</h3><p>在本地初始化一个 Hexo 项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init my-blog</span><br><span class="line"><span class="built_in">cd</span> my-blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li><code>my-blog</code> 是你的项目文件夹名称，可以根据需要修改。</li></ul><hr><h3 id="4-配置-Hexo"><a href="#4-配置-Hexo" class="headerlink" title="4. 配置 Hexo"></a>4. 配置 Hexo</h3><p>在 Hexo 项目的根目录下，编辑 <code>_config.yml</code> 文件，设置以下内容：</p><h4 id="配置部署信息"><a href="#配置部署信息" class="headerlink" title="配置部署信息"></a>配置部署信息</h4><p>找到 <code>deploy</code> 部分，修改为以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><ul><li><code>repo</code>：你的 GitHub 仓库地址。如果仓库名是 <code>username.github.io</code>，GitHub Pages 会自动部署到根目录。</li><li><code>branch</code>：部署分支，通常为 <code>main</code> 或 <code>gh-pages</code>。</li></ul><h4 id="配置-URL-和根目录"><a href="#配置-URL-和根目录" class="headerlink" title="配置 URL 和根目录"></a>配置 URL 和根目录</h4><p>找到 <code>url</code> 和 <code>root</code> 部分，根据你的仓库名称设置：</p><ul><li><p>如果仓库名是 <code>username.github.io</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://username.github.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure></li><li><p>如果仓库名是其他名称（如 <code>my-blog</code>）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://username.github.io/my-blog</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/my-blog/</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="5-安装-Hexo-部署插件"><a href="#5-安装-Hexo-部署插件" class="headerlink" title="5. 安装 Hexo 部署插件"></a>5. 安装 Hexo 部署插件</h3><p>Hexo 需要一个插件来支持 Git 部署。安装 <code>hexo-deployer-git</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><hr><h3 id="6-生成静态文件并部署"><a href="#6-生成静态文件并部署" class="headerlink" title="6. 生成静态文件并部署"></a>6. 生成静态文件并部署</h3><p>在项目根目录下运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><ul><li><code>hexo clean</code>：清理缓存和旧文件。</li><li><code>hexo generate</code>：生成静态文件到 <code>public</code> 目录。</li><li><code>hexo deploy</code>：将生成的静态文件部署到 GitHub 仓库。</li></ul><hr><h3 id="7-配置-GitHub-Pages"><a href="#7-配置-GitHub-Pages" class="headerlink" title="7. 配置 GitHub Pages"></a>7. 配置 GitHub Pages</h3><ol><li>打开 GitHub 仓库，进入 <code>Settings -&gt; Pages</code>。</li><li>在 <code>Source</code> 部分，选择部署分支（如 <code>main</code> 或 <code>gh-pages</code>）。</li><li>确保 <code>Custom domain</code> 为空（除非你使用了自定义域名）。</li><li>点击 <code>Save</code> 保存设置。</li></ol><hr><h3 id="8-访问你的-GitHub-Pages"><a href="#8-访问你的-GitHub-Pages" class="headerlink" title="8. 访问你的 GitHub Pages"></a>8. 访问你的 GitHub Pages</h3><p>部署完成后，访问以下 URL 查看你的网站：</p><ul><li>如果仓库名是 <code>username.github.io</code>，访问 <code>https://username.github.io</code>。</li><li>如果仓库名是其他名称（如 <code>my-blog</code>），访问 <code>https://username.github.io/my-blog</code>。</li></ul><hr><h3 id="9-自动部署（可选）"><a href="#9-自动部署（可选）" class="headerlink" title="9. 自动部署（可选）"></a>9. 自动部署（可选）</h3><p>如果你希望每次推送代码时自动部署，可以使用 GitHub Actions。</p><h4 id="创建-GitHub-Actions-工作流"><a href="#创建-GitHub-Actions-工作流" class="headerlink" title="创建 GitHub Actions 工作流"></a>创建 GitHub Actions 工作流</h4><p>在项目根目录下创建 <code>.github/workflows/deploy.yml</code> 文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">&quot;main&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">18</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Hexo</span> <span class="string">and</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install -g hexo-cli</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">static</span> <span class="string">files</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo generate</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Pages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure><ul><li>这个工作流会在每次推送到 <code>main</code> 分支时自动生成静态文件并部署到 <code>gh-pages</code> 分支。</li></ul><hr><h3 id="10-常见问题"><a href="#10-常见问题" class="headerlink" title="10. 常见问题"></a>10. 常见问题</h3><h4 id="页面没有样式"><a href="#页面没有样式" class="headerlink" title="页面没有样式"></a>页面没有样式</h4><ul><li>检查 <code>_config.yml</code> 中的 <code>url</code> 和 <code>root</code> 配置是否正确。</li><li>确保资源文件路径正确，可以通过浏览器开发者工具查看是否有资源加载失败。</li></ul><h4 id="部署失败"><a href="#部署失败" class="headerlink" title="部署失败"></a>部署失败</h4><ul><li>检查 GitHub 仓库的 <code>Settings -&gt; Pages</code>，确保部署分支正确。</li><li>确保 <code>hexo-deployer-git</code> 插件已安装。</li></ul><h4 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h4><ul><li>如果你使用了自定义域名，在 <code>source</code> 目录下创建 <code>CNAME</code> 文件，内容为你的域名。例如：<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">example</span>.com</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过以上步骤，你可以将 Hexo 项目成功部署到 GitHub Pages。如果需要自动部署，可以使用 GitHub Actions 实现持续集成。如果有任何问题，可以参考 Hexo 和 GitHub Pages 的官方文档，或查看 GitHub 仓库的构建日志。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在vue+springboot项目中使用https</title>
      <link href="/simonzzz/2025/04/20/skills/point/howtousehttps/"/>
      <url>/simonzzz/2025/04/20/skills/point/howtousehttps/</url>
      
        <content type="html"><![CDATA[<p>在 Vue + Spring Boot 项目中使用 HTTPS，需要分别在 Vue 前端和 Spring Boot 后端进行配置。以下是具体步骤：</p><h3 id="1-生成-SSL-证书"><a href="#1-生成-SSL-证书" class="headerlink" title="1. 生成 SSL 证书"></a>1. 生成 SSL 证书</h3><p>首先，你需要一个 SSL 证书。可以使用自签名证书进行测试，或从受信任的证书颁发机构（CA）获取正式证书。</p><h4 id="自签名证书生成"><a href="#自签名证书生成" class="headerlink" title="自签名证书生成"></a>自签名证书生成</h4><p>使用 OpenSSL 生成自签名证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes</span><br></pre></td></tr></table></figure><p>这将生成 <code>key.pem</code>（私钥）和 <code>cert.pem</code>（证书）文件。</p><h3 id="2-配置-Spring-Boot-使用-HTTPS"><a href="#2-配置-Spring-Boot-使用-HTTPS" class="headerlink" title="2. 配置 Spring Boot 使用 HTTPS"></a>2. 配置 Spring Boot 使用 HTTPS</h3><h4 id="将证书放入-Spring-Boot-项目"><a href="#将证书放入-Spring-Boot-项目" class="headerlink" title="将证书放入 Spring Boot 项目"></a>将证书放入 Spring Boot 项目</h4><p>将生成的 <code>key.pem</code> 和 <code>cert.pem</code> 文件放入 <code>src/main/resources</code> 目录。</p><h4 id="修改-application-properties"><a href="#修改-application-properties" class="headerlink" title="修改 application.properties"></a>修改 <code>application.properties</code></h4><p>在 <code>application.properties</code> 中添加以下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8443</span></span><br><span class="line"><span class="attr">server.ssl.key-store</span>=<span class="string">classpath:keystore.p12</span></span><br><span class="line"><span class="attr">server.ssl.key-store-password</span>=<span class="string">your_password</span></span><br><span class="line"><span class="attr">server.ssl.key-password</span>=<span class="string">your_password</span></span><br></pre></td></tr></table></figure><p>将 <code>key.pem</code> 和 <code>cert.pem</code> 转换为 PKCS12 格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -<span class="built_in">export</span> -<span class="keyword">in</span> cert.pem -inkey key.pem -out keystore.p12 -name tomcat -CAfile cert.pem -caname root</span><br></pre></td></tr></table></figure><p>将生成的 <code>keystore.p12</code> 放入 <code>src/main/resources</code> 目录。</p><h3 id="3-配置-Vue-使用-HTTPS"><a href="#3-配置-Vue-使用-HTTPS" class="headerlink" title="3. 配置 Vue 使用 HTTPS"></a>3. 配置 Vue 使用 HTTPS</h3><h4 id="修改-Vue-开发服务器配置"><a href="#修改-Vue-开发服务器配置" class="headerlink" title="修改 Vue 开发服务器配置"></a>修改 Vue 开发服务器配置</h4><p>在 <code>vue.config.js</code> 中配置开发服务器使用 HTTPS：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">    <span class="attr">https</span>: &#123;</span><br><span class="line">      <span class="attr">key</span>: fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;key.pem&#x27;</span>)),</span><br><span class="line">      <span class="attr">cert</span>: fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;cert.pem&#x27;</span>)),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;https://localhost:8443&#x27;</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>将 <code>key.pem</code> 和 <code>cert.pem</code> 放入 Vue 项目根目录。</p><h3 id="4-部署配置"><a href="#4-部署配置" class="headerlink" title="4. 部署配置"></a>4. 部署配置</h3><h4 id="前端部署"><a href="#前端部署" class="headerlink" title="前端部署"></a>前端部署</h4><p>将 Vue 项目打包并部署到支持 HTTPS 的服务器（如 Nginx 或 Apache）。</p><h4 id="后端部署"><a href="#后端部署" class="headerlink" title="后端部署"></a>后端部署</h4><p>将 Spring Boot 项目打包为 JAR 或 WAR 文件，并部署到支持 HTTPS 的服务器。</p><h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h3><p>启动 Spring Boot 和 Vue 项目，分别通过 <code>https://localhost:8443</code> 和 <code>https://localhost:8080</code> 访问，确保 HTTPS 正常工作。</p><h3 id="6-其他注意事项"><a href="#6-其他注意事项" class="headerlink" title="6. 其他注意事项"></a>6. 其他注意事项</h3><ul><li><strong>证书有效期</strong>：自签名证书仅用于测试，生产环境应使用受信任的 CA 证书。</li><li><strong>混合内容</strong>：确保前端资源（如 JS、CSS）通过 HTTPS 加载，避免混合内容问题。</li><li><strong>CORS</strong>：如果前后端分离部署，配置正确的 CORS 策略。</li></ul><p>通过这些步骤，你的 Vue + Spring Boot 项目将能够使用 HTTPS 进行安全通信。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> deepseek </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中级软考证书20天冲刺计划</title>
      <link href="/simonzzz/2025/04/20/skills/point/%E4%B8%AD%E7%BA%A7%E8%BD%AF%E8%80%83%E8%AF%81%E4%B9%A620%E5%A4%A9%E5%86%B2%E5%88%BA%E8%AE%A1%E5%88%92/"/>
      <url>/simonzzz/2025/04/20/skills/point/%E4%B8%AD%E7%BA%A7%E8%BD%AF%E8%80%83%E8%AF%81%E4%B9%A620%E5%A4%A9%E5%86%B2%E5%88%BA%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>中级软考（软件水平考试）是中国计算机技术与软件专业技术资格（水平）考试的一部分，通常包括《基础知识》和《应用技术》两部分。距离考试还有20天的时间，突击复习需要高效且有计划地进行。以下是一个详细的复习路线规划，涵盖知识点梳理、时间安排和备考建议。</p><hr><h3 id="一、复习目标"><a href="#一、复习目标" class="headerlink" title="一、复习目标"></a><strong>一、复习目标</strong></h3><ol><li><strong>基础知识</strong>：掌握考试大纲中的核心知识点，熟悉选择题的常见考点。</li><li><strong>应用技术</strong>：理解案例分析题的解题思路，能够快速定位问题并给出解决方案。</li><li><strong>模拟练习</strong>：通过真题和模拟题训练答题速度和准确率。</li></ol><hr><h3 id="二、复习规划（20天）"><a href="#二、复习规划（20天）" class="headerlink" title="二、复习规划（20天）"></a><strong>二、复习规划（20天）</strong></h3><h4 id="第一阶段：基础巩固（第1-7天）"><a href="#第一阶段：基础巩固（第1-7天）" class="headerlink" title="第一阶段：基础巩固（第1-7天）"></a><strong>第一阶段：基础巩固（第1-7天）</strong></h4><p>目标：全面梳理考试大纲中的知识点，夯实基础。</p><ol><li><p><strong>基础知识部分</strong>  </p><ul><li><strong>重点内容</strong>：<ol><li><strong>计算机系统知识</strong>  <ul><li>计算机组成原理（CPU、内存、I&#x2F;O设备等）</li><li>操作系统基础（进程管理、存储管理、文件系统）</li><li>数据库基础（关系模型、SQL语言、事务管理）</li></ul></li><li><strong>网络基础</strong>  <ul><li>网络协议（TCP&#x2F;IP、HTTP、DNS等）</li><li>网络架构（OSI七层模型、IP地址分类）</li></ul></li><li><strong>软件工程</strong>  <ul><li>软件生命周期（需求分析、设计、编码、测试、维护）</li><li>常见开发模型（瀑布模型、敏捷开发）</li></ul></li><li><strong>信息安全</strong>  <ul><li>加密算法（对称加密、非对称加密）</li><li>安全威胁与防护措施</li></ul></li><li><strong>法律法规与标准化</strong>  <ul><li>知识产权保护</li><li>标准化基础知识（ISO、GB&#x2F;T）</li></ul></li></ol></li><li><strong>复习方法</strong>：<ul><li>按照考试大纲逐条学习，使用教材或在线课程辅助理解。</li><li>制作知识点卡片，方便随时翻阅记忆。</li><li>每天完成一部分内容后，做对应章节的选择题练习。</li></ul></li></ul></li><li><p><strong>应用技术部分</strong>  </p><ul><li><strong>重点内容</strong>：<ol><li><strong>案例分析</strong>  <ul><li>需求分析（如何识别用户需求）</li><li>系统设计（模块划分、接口设计）</li><li>测试方法（黑盒测试、白盒测试）</li></ul></li><li><strong>项目管理</strong>  <ul><li>项目范围管理</li><li>进度管理（关键路径法、甘特图）</li><li>成本管理（挣值分析）</li></ul></li></ol></li><li><strong>复习方法</strong>：<ul><li>学习经典案例，总结常见问题及解题思路。</li><li>针对每种题型（如需求变更、进度延误等），整理出模板化答案。</li></ul></li></ul></li></ol><hr><h4 id="第二阶段：强化训练（第8-15天）"><a href="#第二阶段：强化训练（第8-15天）" class="headerlink" title="第二阶段：强化训练（第8-15天）"></a><strong>第二阶段：强化训练（第8-15天）</strong></h4><p>目标：通过真题和模拟题提升答题能力，查漏补缺。</p><ol><li><p><strong>基础知识部分</strong>  </p><ul><li>每天完成一套真题或模拟题的选择题部分。</li><li>分析错题，标记薄弱知识点，针对性复习。</li><li>对高频考点（如数据库SQL语句、网络协议等）进行专项练习。</li></ul></li><li><p><strong>应用技术部分</strong>  </p><ul><li>每天完成2-3道案例分析题，严格按照考试时间要求完成。</li><li>总结答题模板，例如：<ul><li>需求变更问题：“首先确认变更的必要性，其次评估变更的影响，最后制定实施计划。”</li><li>进度延误问题：“分析延误原因，调整关键路径活动，重新分配资源。”</li></ul></li></ul></li><li><p><strong>时间分配</strong>  </p><ul><li>每天上午：基础知识复习+练习</li><li>下午：应用技术案例分析</li><li>晚上：错题回顾与总结</li></ul></li></ol><hr><h4 id="第三阶段：冲刺模拟（第16-20天）"><a href="#第三阶段：冲刺模拟（第16-20天）" class="headerlink" title="第三阶段：冲刺模拟（第16-20天）"></a><strong>第三阶段：冲刺模拟（第16-20天）</strong></h4><p>目标：模拟真实考试环境，提升应试能力。</p><ol><li><p><strong>整卷模拟</strong>  </p><ul><li>每天完成一套完整的真题或模拟题，严格按照考试时间（基础知识150分钟，应用技术150分钟）进行。</li><li>模拟后认真分析试卷，总结经验教训。</li></ul></li><li><p><strong>重点突破</strong>  </p><ul><li>针对前两个阶段发现的薄弱环节，集中精力复习。</li><li>对高频考点进行最后的记忆强化，例如：<ul><li>SQL查询语句</li><li>关键路径计算公式</li><li>信息安全加密算法</li></ul></li></ul></li><li><p><strong>心理调整</strong>  </p><ul><li>保持良好的作息，避免熬夜。</li><li>调整心态，树立信心，相信自己的努力会有回报。</li></ul></li></ol><hr><h3 id="三、详细知识点清单"><a href="#三、详细知识点清单" class="headerlink" title="三、详细知识点清单"></a><strong>三、详细知识点清单</strong></h3><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a><strong>基础知识</strong></h4><ol><li><strong>计算机系统知识</strong><ul><li>CPU结构与功能</li><li>内存层次结构（Cache、RAM、ROM）</li><li>输入输出设备工作原理</li></ul></li><li><strong>操作系统</strong><ul><li>进程与线程的区别</li><li>死锁的产生条件与预防</li><li>文件系统结构</li></ul></li><li><strong>数据库</strong><ul><li>关系模型的基本概念</li><li>SQL查询语句（SELECT、INSERT、UPDATE、DELETE）</li><li>数据库事务特性（ACID）</li></ul></li><li><strong>网络基础</strong><ul><li>OSI七层模型与TCP&#x2F;IP四层模型</li><li>常见网络协议（HTTP、FTP、SMTP）</li><li>IP地址分类与子网划分</li></ul></li><li><strong>信息安全</strong><ul><li>对称加密与非对称加密算法</li><li>数字签名与认证机制</li><li>常见安全威胁（病毒、木马、DDoS攻击）</li></ul></li></ol><h4 id="应用技术"><a href="#应用技术" class="headerlink" title="应用技术"></a><strong>应用技术</strong></h4><ol><li><strong>需求分析</strong><ul><li>需求获取方法（访谈、问卷调查）</li><li>需求文档编写规范</li></ul></li><li><strong>系统设计</strong><ul><li>模块划分原则</li><li>接口设计注意事项</li></ul></li><li><strong>测试方法</strong><ul><li>黑盒测试与白盒测试的区别</li><li>测试用例设计方法</li></ul></li><li><strong>项目管理</strong><ul><li>项目范围管理工具（WBS）</li><li>关键路径法计算</li><li>挣值分析公式（PV、EV、AC、CV、SV）</li></ul></li></ol><hr><h3 id="四、备考建议"><a href="#四、备考建议" class="headerlink" title="四、备考建议"></a><strong>四、备考建议</strong></h3><ol><li><strong>合理分配时间</strong>  <ul><li>每天至少保证6小时的复习时间，分段进行基础知识和应用技术的学习。</li></ul></li><li><strong>善用工具</strong>  <ul><li>使用思维导图整理知识点。</li><li>下载历年真题和模拟题APP，随时随地刷题。</li></ul></li><li><strong>保持专注</strong>  <ul><li>减少干扰，专注于复习内容。</li><li>定期休息，避免过度疲劳。</li></ul></li></ol><hr><p>中级软考证书考试虽然难度适中，但涉及的知识点广泛，需要考生在短时间内高效复习。按照上述规划，您可以在20天内完成从基础到强化再到冲刺的全过程复习。坚持每天按计划执行，结合真题练习，相信您一定能够顺利通过考试！</p>]]></content>
      
      
      <categories>
          
          <category> 软考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
            <tag> 中级软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何利用PC微信客户端实现微信机器人</title>
      <link href="/simonzzz/2025/04/15/AI/wechatrebot/"/>
      <url>/simonzzz/2025/04/15/AI/wechatrebot/</url>
      
        <content type="html"><![CDATA[<h1 id="微信机器人搭建指南"><a href="#微信机器人搭建指南" class="headerlink" title="微信机器人搭建指南"></a>微信机器人搭建指南</h1><p>本文将详细介绍如何使用PC微信客户端搭建一个功能强大的微信机器人。通过本教程，您可以实现自动回复、消息转发等实用功能。</p><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><h3 id="1-1-安装PyCharm"><a href="#1-1-安装PyCharm" class="headerlink" title="1.1 安装PyCharm"></a>1.1 安装PyCharm</h3><p>首先需要安装Python开发环境PyCharm：</p><ul><li>下载地址：<a href="https://www.jetbrains.com.cn/pycharm/download/download-thanks.html?platform=windows">PyCharm官方下载</a></li><li>选择Community（社区版）即可满足需求</li></ul><p><img src="/simonzzz/imgs/AI/0bbebdfbbb9e8c060d0fd9b9cba28eb1.png" alt="PyCharm下载页面"></p><h3 id="1-2-获取项目代码"><a href="#1-2-获取项目代码" class="headerlink" title="1.2 获取项目代码"></a>1.2 获取项目代码</h3><p>我们使用WeChatRobot项目作为基础：</p><ul><li>GitHub地址：<code>https://github.com/lich0821/WeChatRobot.git</code></li><li>国内镜像（推荐）：<code>https://gitee.com/lch0821/WeChatRobot.git</code></li></ul><p><img src="/simonzzz/imgs/AI/1.png" alt="克隆项目"></p><h2 id="2-项目配置"><a href="#2-项目配置" class="headerlink" title="2. 项目配置"></a>2. 项目配置</h2><h3 id="2-1-配置Python解释器"><a href="#2-1-配置Python解释器" class="headerlink" title="2.1 配置Python解释器"></a>2.1 配置Python解释器</h3><ol><li>打开PyCharm</li><li>进入设置（Settings）</li><li>选择项目解释器（Project Interpreter）</li><li>添加新的Python解释器</li></ol><p><img src="/simonzzz/imgs/AI/2.png" alt="配置解释器步骤1"><br><img src="/simonzzz/imgs/AI/3.png" alt="配置解释器步骤2"><br><img src="/simonzzz/imgs/AI/4.png" alt="配置解释器步骤3"></p><h3 id="2-2-安装依赖包"><a href="#2-2-安装依赖包" class="headerlink" title="2.2 安装依赖包"></a>2.2 安装依赖包</h3><p>在项目根目录下找到<code>requirements.txt</code>文件，使用以下命令安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="3-下载必要组件"><a href="#3-下载必要组件" class="headerlink" title="3. 下载必要组件"></a>3. 下载必要组件</h2><h3 id="3-1-下载WeChatFerry"><a href="#3-1-下载WeChatFerry" class="headerlink" title="3.1 下载WeChatFerry"></a>3.1 下载WeChatFerry</h3><p>这是实现微信机器人的核心组件：</p><ul><li>下载地址：<a href="https://github.com/wechatferry/wechatferry/archive/refs/tags/v0.0.26.zip">WeChatFerry v0.0.26</a></li></ul><h3 id="3-2-安装指定版本微信"><a href="#3-2-安装指定版本微信" class="headerlink" title="3.2 安装指定版本微信"></a>3.2 安装指定版本微信</h3><p><strong>重要提示</strong>：必须使用指定版本的微信客户端，否则可能无法正常运行：</p><ul><li>下载地址：<a href="https://github.com/lich0821/WeChatFerry/releases/download/v39.4.5/WeChatSetup-3.9.12.17.exe">微信3.9.12.17版本</a></li></ul><h2 id="4-运行机器人"><a href="#4-运行机器人" class="headerlink" title="4. 运行机器人"></a>4. 运行机器人</h2><ol><li>确保所有组件都已正确安装</li><li>打开PyCharm</li><li>运行项目根目录下的<code>main.py</code>文件</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>请确保使用指定版本的微信客户端</li><li>首次运行时可能需要管理员权限</li><li>建议在运行前关闭其他微信进程</li><li>如遇到问题，可以查看项目文档或提交Issue</li></ol><h2 id="后续更新"><a href="#后续更新" class="headerlink" title="后续更新"></a>后续更新</h2><p>本文将持续更新，添加更多实用功能和问题解决方案。如果您有任何问题或建议，欢迎在评论区留言。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>explain全解析</title>
      <link href="/simonzzz/2025/04/13/skills/mysql/explain/"/>
      <url>/simonzzz/2025/04/13/skills/mysql/explain/</url>
      
        <content type="html"><![CDATA[<p><code>EXPLAIN</code> 是 MySQL 中用于分析 SQL 查询执行计划的核心工具。它可以帮助开发者理解 MySQL 如何执行查询（如表连接顺序、索引使用情况、扫描行数等），从而优化查询性能。以下是 <code>EXPLAIN</code> 的详细解析和使用示例。</p><hr><h3 id="一、基础语法"><a href="#一、基础语法" class="headerlink" title="一、基础语法"></a><strong>一、基础语法</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN [选项] <span class="keyword">SQL</span>语句;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="二、输出字段详解"><a href="#二、输出字段详解" class="headerlink" title="二、输出字段详解"></a><strong>二、输出字段详解</strong></h3><p><code>EXPLAIN</code> 的输出结果包含以下关键字段，每个字段反映了查询执行计划的细节：</p><h4 id="1-id"><a href="#1-id" class="headerlink" title="1. id"></a><strong>1. id</strong></h4><ul><li><strong>含义</strong>：查询的唯一标识符。</li><li><strong>规则</strong>：<ul><li>简单查询（单表）的 <code>id</code> 相同。</li><li>复杂查询（如子查询、联合查询）中，每个子查询会生成不同的 <code>id</code>。</li><li><code>id</code> 值越大，优先级越高，越先执行。</li></ul></li></ul><h4 id="2-select-type"><a href="#2-select-type" class="headerlink" title="2. select_type"></a><strong>2. select_type</strong></h4><ul><li><strong>含义</strong>：查询的类型。</li><li><strong>常见值</strong>：<ul><li><code>SIMPLE</code>：简单查询（不包含子查询或 UNION）。</li><li><code>PRIMARY</code>：最外层的查询（包含子查询或 UNION）。</li><li><code>SUBQUERY</code>：子查询中的第一个 SELECT。</li><li><code>DERIVED</code>：派生表（如 FROM 子句中的子查询）。</li><li><code>UNION</code>：UNION 中的第二个或后续 SELECT。</li><li><code>UNION RESULT</code>：UNION 的结果。</li></ul></li></ul><h4 id="3-table"><a href="#3-table" class="headerlink" title="3. table"></a><strong>3. table</strong></h4><ul><li><strong>含义</strong>：当前操作的表名。</li><li><strong>示例</strong>：<code>&lt;derived2&gt;</code> 表示一个派生表（临时表）。</li></ul><h4 id="4-partitions"><a href="#4-partitions" class="headerlink" title="4. partitions"></a><strong>4. partitions</strong></h4><ul><li><strong>含义</strong>：涉及的分区（如果表是分区表）。</li></ul><h4 id="5-type"><a href="#5-type" class="headerlink" title="5. type"></a><strong>5. type</strong></h4><ul><li><strong>含义</strong>：访问类型（从最优到最差）：<ul><li><code>system</code>：表只有一行（系统表）。</li><li><code>const</code>：通过主键或唯一索引匹配一行。</li><li><code>eq_ref</code>：唯一索引扫描（多表连接时）。</li><li><code>ref</code>：非唯一索引扫描。</li><li><code>range</code>：索引范围扫描。</li><li><code>index</code>：全索引扫描（覆盖索引）。</li><li><code>ALL</code>：全表扫描（需优化）。</li></ul></li><li><strong>优化目标</strong>：尽量避免 <code>ALL</code>，追求 <code>const</code>、<code>eq_ref</code>、<code>ref</code>。</li></ul><h4 id="6-possible-keys"><a href="#6-possible-keys" class="headerlink" title="6. possible_keys"></a><strong>6. possible_keys</strong></h4><ul><li><strong>含义</strong>：可能应用的索引列表。</li></ul><h4 id="7-key"><a href="#7-key" class="headerlink" title="7. key"></a><strong>7. key</strong></h4><ul><li><strong>含义</strong>：实际使用的索引。</li></ul><h4 id="8-key-len"><a href="#8-key-len" class="headerlink" title="8. key_len"></a><strong>8. key_len</strong></h4><ul><li><strong>含义</strong>：索引使用的字节数。</li><li><strong>作用</strong>：判断联合索引是否被完全使用。</li><li><strong>示例</strong>：若索引是 <code>(a, b)</code>，<code>key_len</code> 为 <code>a</code> 的长度，说明只使用了部分索引。</li></ul><h4 id="9-ref"><a href="#9-ref" class="headerlink" title="9. ref"></a><strong>9. ref</strong></h4><ul><li><strong>含义</strong>：索引的哪一列或常量被用于匹配。</li><li><strong>示例</strong>：<code>const</code>（常量）、<code>func</code>（函数）、<code>某个字段</code>。</li></ul><h4 id="10-rows"><a href="#10-rows" class="headerlink" title="10. rows"></a><strong>10. rows</strong></h4><ul><li><strong>含义</strong>：预估需要扫描的行数。</li><li><strong>优化目标</strong>：越小越好。</li></ul><h4 id="11-filtered"><a href="#11-filtered" class="headerlink" title="11. filtered"></a><strong>11. filtered</strong></h4><ul><li><strong>含义</strong>：通过条件过滤的行百分比（与 <code>rows</code> 结合估算实际行数）。</li></ul><h4 id="12-Extra"><a href="#12-Extra" class="headerlink" title="12. Extra"></a><strong>12. Extra</strong></h4><ul><li><strong>含义</strong>：额外信息，关键优化提示。</li><li><strong>常见值</strong>：<ul><li><code>Using where</code>：使用 WHERE 条件过滤。</li><li><code>Using index</code>：使用覆盖索引（无需回表）。</li><li><code>Using temporary</code>：使用临时表（需优化）。</li><li><code>Using filesort</code>：使用文件排序（需优化）。</li><li><code>Select tables optimized away</code>：查询被优化器直接返回结果（如聚合函数）。</li></ul></li></ul><hr><h3 id="三、示例分析"><a href="#三、示例分析" class="headerlink" title="三、示例分析"></a><strong>三、示例分析</strong></h3><h4 id="示例-1：全表扫描"><a href="#示例-1：全表扫描" class="headerlink" title="示例 1：全表扫描"></a><strong>示例 1：全表扫描</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">| id | select_type | table     | partitions | <span class="class"><span class="keyword">type</span> | possible_keys | key  | key_len | ref  | rows | filtered | <span class="type">Extra</span> |</span></span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">| <span class="number">1</span>  | <span class="type">SIMPLE</span>      | employees | <span class="type">NULL</span>       | <span class="type">ALL</span>  | <span class="type">NULL</span>          | <span class="type">NULL</span> | <span class="type">NULL</span>    | <span class="type">NULL</span> | <span class="number">3000</span> | <span class="number">100.00</span>   | <span class="type">NULL</span>  |</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br></pre></td></tr></table></figure><p><strong>分析</strong>：</p><ul><li><code>type</code> 为 <code>ALL</code>（全表扫描），需添加索引优化。</li></ul><hr><h4 id="示例-2：使用索引"><a href="#示例-2：使用索引" class="headerlink" title="示例 2：使用索引"></a><strong>示例 2：使用索引</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> name <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+----+-------------+-----------+------------+-------+---------------+---------+---------+-------+------+----------+-------------+</span><br><span class="line">| id | select_type | table     | partitions | <span class="class"><span class="keyword">type</span>  | possible_keys | key     | key_len | ref   | rows | filtered | <span class="type">Extra</span>       |</span></span><br><span class="line">+----+-------------+-----------+------------+-------+---------------+---------+---------+-------+------+----------+-------------+</span><br><span class="line">| <span class="number">1</span>  | <span class="type">SIMPLE</span>      | employees | <span class="type">NULL</span>       | const | <span class="type">PRIMARY</span>       | <span class="type">PRIMARY</span> | <span class="number">4</span>       | const | <span class="number">1</span>    | <span class="number">100.00</span>   | <span class="type">Using</span> index |</span><br><span class="line">+----+-------------+-----------+------------+-------+---------------+---------+---------+-------+------+----------+-------------+</span><br></pre></td></tr></table></figure><p><strong>分析</strong>：</p><ul><li><code>type</code> 为 <code>const</code>（主键查询），<code>Using index</code> 表示使用了覆盖索引。</li></ul><hr><h4 id="示例-3：复杂查询（JOIN）"><a href="#示例-3：复杂查询（JOIN）" class="headerlink" title="示例 3：复杂查询（JOIN）"></a><strong>示例 3：复杂查询（JOIN）</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> a.name, b.salary </span><br><span class="line"><span class="keyword">FROM</span> employees a </span><br><span class="line"><span class="keyword">JOIN</span> salaries b <span class="keyword">ON</span> a.id <span class="operator">=</span> b.employee_id </span><br><span class="line"><span class="keyword">WHERE</span> a.department <span class="operator">=</span> <span class="string">&#x27;IT&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+-------------+-------+------------+------+---------------+---------+---------+----------------+------+----------+-------------+</span><br><span class="line">|<span class="string"> id </span>|<span class="string"> select_type </span>|<span class="string"> table </span>|<span class="string"> partitions </span>|<span class="string"> type </span>|<span class="string"> possible_keys </span>|<span class="string"> key     </span>|<span class="string"> key_len </span>|<span class="string"> ref            </span>|<span class="string"> rows </span>|<span class="string"> filtered </span>|<span class="string"> Extra       </span>|</span><br><span class="line">+----+-------------+-------+------------+------+---------------+---------+---------+----------------+------+----------+-------------+</span><br><span class="line">|<span class="string"> 1  </span>|<span class="string"> SIMPLE      </span>|<span class="string"> a     </span>|<span class="string"> NULL       </span>|<span class="string"> ref  </span>|<span class="string"> idx_dept      </span>|<span class="string"> idx_dept</span>|<span class="string"> 768     </span>|<span class="string"> const          </span>|<span class="string"> 100  </span>|<span class="string"> 100.00   </span>|<span class="string"> Using where </span>|</span><br><span class="line">|<span class="string"> 1  </span>|<span class="string"> SIMPLE      </span>|<span class="string"> b     </span>|<span class="string"> NULL       </span>|<span class="string"> ref  </span>|<span class="string"> emp_id        </span>|<span class="string"> emp_id  </span>|<span class="string"> 4       </span>|<span class="string"> test.a.id      </span>|<span class="string"> 10   </span>|<span class="string"> 100.00   </span>|<span class="string"> NULL        </span>|</span><br><span class="line">+----+-------------+-------+------------+------+---------------+---------+---------+----------------+------+----------+-------------+</span><br></pre></td></tr></table></figure><p><strong>分析</strong>：</p><ul><li><code>employees</code> 表通过 <code>idx_dept</code> 索引筛选出 100 行。</li><li><code>salaries</code> 表通过 <code>emp_id</code> 索引与 <code>employees</code> 表关联。</li></ul><hr><h3 id="四、优化建议"><a href="#四、优化建议" class="headerlink" title="四、优化建议"></a><strong>四、优化建议</strong></h3><ol><li><p><strong>避免全表扫描（ALL）</strong>  </p><ul><li>为 WHERE、JOIN、ORDER BY 条件添加合适的索引。</li><li>示例：<code>ALTER TABLE employees ADD INDEX idx_dept (department);</code></li></ul></li><li><p><strong>减少回表（Using index）</strong>  </p><ul><li>使用覆盖索引（查询字段全部包含在索引中）。</li></ul></li><li><p><strong>优化临时表和文件排序</strong>  </p><ul><li>减少复杂查询中的 <code>DISTINCT</code>、<code>GROUP BY</code>、<code>ORDER BY</code>。</li><li>确保排序字段有索引。</li></ul></li><li><p><strong>关联查询优化</strong>  </p><ul><li>小表驱动大表。</li><li>确保关联字段有索引。</li></ul></li></ol><hr><h3 id="五、常见误区"><a href="#五、常见误区" class="headerlink" title="五、常见误区"></a><strong>五、常见误区</strong></h3><ul><li><p><strong>索引越多越好？</strong><br>错误。过多的索引会降低写入性能，需权衡查询与写入需求。</p></li><li><p><strong>EXPLAIN 的 rows 是准确的？</strong><br>不准确。它是 MySQL 的预估值，实际行数可能不同。</p></li><li><p><strong>type &#x3D; range 一定比 ref 差？</strong><br>不一定。范围查询可能更高效，需结合具体场景。</p></li></ul><hr><h3 id="六、进阶用法"><a href="#六、进阶用法" class="headerlink" title="六、进阶用法"></a><strong>六、进阶用法</strong></h3><ol><li><p><strong>分析 UPDATE&#x2F;DELETE</strong>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> <span class="number">10000</span> <span class="keyword">WHERE</span> department <span class="operator">=</span> <span class="string">&#x27;IT&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>查看分区信息</strong>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN PARTITIONS <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> partitioned_table;</span><br></pre></td></tr></table></figure></li><li><p><strong>结合 SHOW WARNINGS</strong>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN EXTENDED <span class="keyword">SELECT</span> ...;</span><br><span class="line"><span class="keyword">SHOW</span> WARNINGS;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>通过 <code>EXPLAIN</code>，可以快速定位查询性能瓶颈，优化索引和 SQL 逻辑。建议在开发过程中对复杂查询进行常态化分析，避免生产环境出现慢查询。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题 2025-04-10 12:42:14</title>
      <link href="/simonzzz/2025/04/10/skills/interview/interview6/"/>
      <url>/simonzzz/2025/04/10/skills/interview/interview6/</url>
      
        <content type="html"><![CDATA[<p>以下是基于艾梦秋简历内容设计的30分钟模拟面试题，涵盖技术深度、项目经验和综合能力考察：</p><hr><h3 id="一、技术基础考察（8分钟）"><a href="#一、技术基础考察（8分钟）" class="headerlink" title="一、技术基础考察（8分钟）"></a><strong>一、技术基础考察（8分钟）</strong></h3><ol><li><p><strong>Java核心</strong>  </p><ul><li>你在项目中使用过ConcurrentHashMap，请说明它的线程安全实现原理，与Hashtable有何区别？  </li><li>如何通过Java Stream API对一个用户列表进行分组统计（如按城市分组）？请举例代码片段。</li></ul></li><li><p><strong>JVM与优化</strong>  </p><ul><li>解释JVM内存模型中堆内存的分代机制，Minor GC和Full GC的触发条件是什么？  </li><li>在项目中是否遇到过内存泄漏问题？如何通过工具（如MAT）定位和解决？</li></ul></li><li><p><strong>数据库与优化</strong>  </p><ul><li>在MySQL中，索引的最左匹配原则是什么？如何通过<code>EXPLAIN</code>分析慢查询？  </li><li>分库分表后如何解决跨库查询问题？ShardingSphere的分片策略有哪些？</li></ul></li></ol><hr><h3 id="二、框架与中间件（10分钟）"><a href="#二、框架与中间件（10分钟）" class="headerlink" title="二、框架与中间件（10分钟）"></a><strong>二、框架与中间件（10分钟）</strong></h3><ol><li><p><strong>Spring生态</strong>  </p><ul><li>Spring Boot的自动配置原理是什么？如何自定义一个Starter？  </li><li>你在项目中使用Sentinel实现熔断，如何配置一个基于异常比例的熔断策略？</li></ul></li><li><p><strong>分布式与微服务</strong>  </p><ul><li>Seata的AT模式如何保证分布式事务一致性？请描述其两阶段提交过程。  </li><li>RabbitMQ如何保证消息可靠性投递？消息重复消费如何解决？</li></ul></li><li><p><strong>缓存与性能</strong>  </p><ul><li>如何设计Redis的缓存穿透解决方案？布隆过滤器的原理和适用场景是什么？  </li><li>在项目中如何通过Redis优化高并发查询？是否遇到缓存击穿问题？如何解决？</li></ul></li></ol><hr><h3 id="三、项目深度追问（10分钟）"><a href="#三、项目深度追问（10分钟）" class="headerlink" title="三、项目深度追问（10分钟）"></a><strong>三、项目深度追问（10分钟）</strong></h3><ol><li><p><strong>福建移动管线资源管理系统</strong>  </p><ul><li>资源拓扑关系算法的核心逻辑是什么？如何实现光缆链路级联查询的秒级响应？  </li><li>结合Seata和RabbitMQ解决分布式事务时，消息重试机制的具体实现步骤是什么？</li></ul></li><li><p><strong>技术选型与权衡</strong>  </p><ul><li>为什么选择ShardingSphere+ Elasticsearch的组合实现亿级数据查询？是否考虑过其他方案（如ClickHouse）？  </li><li>在限流策略中，Sentinel的QPS限流和线程数限流分别适用于什么场景？</li></ul></li></ol><hr><h3 id="四、综合能力（2分钟）"><a href="#四、综合能力（2分钟）" class="headerlink" title="四、综合能力（2分钟）"></a><strong>四、综合能力（2分钟）</strong></h3><ol><li><p><strong>设计模式与重构</strong>  </p><ul><li>你在项目中用过哪些设计模式？请举例说明工厂模式在Spring中的应用。  </li><li>如何重构一段重复代码？请描述重构的步骤和注意事项。</li></ul></li><li><p><strong>学习与协作</strong>  </p><ul><li>最近学习的一项新技术是什么？如何快速掌握并应用到项目中？  </li><li>在团队协作中，如何解决技术方案分歧（如同事坚持使用效率低的实现方式）？</li></ul></li></ol><hr><p>以下是为艾梦秋简历定制的 <strong>场景题补充</strong>，结合其项目经验和技术栈，模拟真实业务场景考察综合能力：</p><hr><h3 id="五、场景设计题（新增）"><a href="#五、场景设计题（新增）" class="headerlink" title="五、场景设计题（新增）"></a><strong>五、场景设计题（新增）</strong></h3><h4 id="场景1：分布式事务冲突（结合福建移动项目）"><a href="#场景1：分布式事务冲突（结合福建移动项目）" class="headerlink" title="场景1：分布式事务冲突（结合福建移动项目）"></a><strong>场景1：分布式事务冲突（结合福建移动项目）</strong></h4><p><strong>背景</strong>：在资源调度接口中，两个并发请求同时修改同一条光缆的状态（如“空闲→占用”），导致数据不一致。<br><strong>问题</strong>：  </p><ol><li>如何通过Seata的AT模式解决此问题？请描述分支事务注册和全局锁机制的作用。  </li><li>如果因网络波动导致Seata TC协调失败，如何结合RabbitMQ的消息重试保证最终一致性？</li></ol><p><strong>考察点</strong>：分布式事务边界划分、异常处理与补偿机制设计。</p><hr><h4 id="场景2：突发流量下的系统保护"><a href="#场景2：突发流量下的系统保护" class="headerlink" title="场景2：突发流量下的系统保护"></a><strong>场景2：突发流量下的系统保护</strong></h4><p><strong>背景</strong>：某次资源查询接口因促销活动流量突增10倍，Redis缓存击穿导致数据库负载飙升。<br><strong>问题</strong>：  </p><ol><li>如何通过Redis+Lua脚本实现分布式锁控制热点Key的重建？  </li><li>若缓存集群全部宕机，如何通过Sentinel的熔断降级策略避免数据库崩溃？</li></ol><p><strong>考察点</strong>：高并发场景下的缓存设计、熔断策略与容灾意识。</p><hr><h4 id="场景3：分库分表后的数据迁移"><a href="#场景3：分库分表后的数据迁移" class="headerlink" title="场景3：分库分表后的数据迁移"></a><strong>场景3：分库分表后的数据迁移</strong></h4><p><strong>背景</strong>：历史资源表按月分片后，需将旧数据迁移到新分片策略（如从按时间分片改为按区域+时间分片）。<br><strong>问题</strong>：  </p><ol><li>如何设计数据迁移方案保证业务无感知？是否需要停机？  </li><li>迁移过程中如何处理新旧数据的双写一致性？</li></ol><p><strong>考察点</strong>：分库分表迁移经验、数据一致性保障手段（如影子表、Binlog同步）。</p><hr><h4 id="场景4：跨团队协作冲突"><a href="#场景4：跨团队协作冲突" class="headerlink" title="场景4：跨团队协作冲突"></a><strong>场景4：跨团队协作冲突</strong></h4><p><strong>背景</strong>：前端团队要求后端在资源查询接口中新增一个字段，但该字段需关联5张表且计算耗时，可能影响接口性能。<br><strong>问题</strong>：  </p><ol><li>如何与前端沟通平衡需求与性能？  </li><li>若必须实现，如何通过缓存预计算或异步加载优化响应时间？</li></ol><p><strong>考察点</strong>：技术方案权衡能力、沟通技巧与性能优化思路。</p><hr><h4 id="场景5：线上故障排查（结合简历中的性能优化案例）"><a href="#场景5：线上故障排查（结合简历中的性能优化案例）" class="headerlink" title="场景5：线上故障排查（结合简历中的性能优化案例）"></a><strong>场景5：线上故障排查（结合简历中的性能优化案例）</strong></h4><p><strong>背景</strong>：某天监控显示资源查询接口响应时间从150ms突增至3s，但Redis和数据库指标正常。<br><strong>问题</strong>：  </p><ol><li>可能的故障点有哪些？如何通过Arthas或日志快速定位？  </li><li>如果发现是Elasticsearch聚合查询变慢，如何优化分片策略或查询语句？</li></ol><p><strong>考察点</strong>：全链路监控意识、故障排查方法论与工具使用熟练度。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程面试题</title>
      <link href="/simonzzz/2025/04/07/skills/interview/interview3/"/>
      <url>/simonzzz/2025/04/07/skills/interview/interview3/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a><strong>一、基础知识</strong></h3><ol><li><p><strong>什么是线程？线程和进程的区别是什么？</strong>  </p><ul><li><strong>线程</strong>是程序执行流的最小单位，一个进程可以包含多个线程。  </li><li><strong>区别</strong>：  <ul><li>进程是资源分配的基本单位，线程是 CPU 调度的基本单位。  </li><li>线程共享进程的内存空间，而进程有独立的内存空间。  </li><li>线程间通信更容易，进程间通信需要 IPC（如管道、消息队列等）。</li></ul></li></ul></li><li><p><strong>Java 中如何创建线程？有几种方式？分别有什么优缺点？</strong>  </p><ul><li><strong>方式</strong>：  <ol><li>继承 <code>Thread</code> 类并重写 <code>run()</code> 方法。  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(<span class="string">&quot;Thread running&quot;</span>));</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><strong>优点</strong>：简单直接；<strong>缺点</strong>：由于 Java 不支持多继承，限制了类的扩展性。  </li><li>实现 <code>Runnable</code> 接口。  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;Runnable task&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(task).start();</span><br></pre></td></tr></table></figure><strong>优点</strong>：更灵活，支持多继承；<strong>缺点</strong>：无返回值和异常处理能力。  </li><li>使用 <code>Callable</code> 和 <code>Future</code>。  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">Future&lt;Integer&gt; result = executor.submit(() -&gt; <span class="number">42</span>);</span><br><span class="line">System.out.println(result.get());</span><br><span class="line">executor.shutdown();</span><br></pre></td></tr></table></figure><strong>优点</strong>：支持返回值和异常处理；<strong>缺点</strong>：依赖线程池。</li></ol></li></ul></li><li><p><strong><code>start()</code> 方法和 <code>run()</code> 方法的区别是什么？</strong>  </p><ul><li><code>start()</code> 启动新线程并调用 <code>run()</code> 方法，而直接调用 <code>run()</code> 只是在当前线程中执行方法，不会启动新线程。</li></ul></li><li><p><strong>线程的生命周期有哪些状态？请详细描述每个状态及其转换条件。</strong>  </p><ul><li><strong>状态</strong>：  <ol><li><strong>New</strong>：线程被创建但尚未启动。  </li><li><strong>Runnable</strong>：线程已启动，正在等待 CPU 时间片。  </li><li><strong>Blocked&#x2F;Waiting</strong>：线程因等待锁或资源而阻塞。  </li><li><strong>Timed Waiting</strong>：线程处于等待状态，但设置了超时时间。  </li><li><strong>Terminated</strong>：线程执行完毕或被终止。</li></ol></li></ul></li><li><p><strong>什么是守护线程（Daemon Thread）？如何设置守护线程？</strong>  </p><ul><li>守护线程是为其他线程提供服务的线程，当所有用户线程结束时，守护线程自动终止。  </li><li>设置方法：<code>thread.setDaemon(true);</code></li></ul></li><li><p><strong>如何获取当前线程的引用？如何获取主线程的引用？</strong>  </p><ul><li>获取当前线程：<code>Thread.currentThread();</code>  </li><li>获取主线程：通过 <code>Thread.currentThread()</code> 在主线程中调用即可。</li></ul></li></ol><hr><h3 id="二、线程同步与并发控制"><a href="#二、线程同步与并发控制" class="headerlink" title="二、线程同步与并发控制"></a><strong>二、线程同步与并发控制</strong></h3><ol start="7"><li><p><strong>什么是线程安全？什么情况下会出现线程安全问题？</strong>  </p><ul><li>线程安全是指多个线程访问共享资源时，程序能正确运行而不出现数据不一致的情况。  </li><li>常见问题：竞态条件、死锁、活锁、饥饿。</li></ul></li><li><p><strong>Java 中有哪些实现线程同步的方式？</strong>  </p><ul><li><code>synchronized</code> 关键字：修饰方法或代码块，保证同一时刻只有一个线程访问。  </li><li><code>ReentrantLock</code>：显式锁，支持公平锁、可中断锁等高级功能。  </li><li><code>ReadWriteLock</code>：允许多个读线程同时访问，但写线程独占。</li></ul></li><li><p><strong><code>synchronized</code> 的锁机制是如何工作的？它有哪些使用场景？</strong>  </p><ul><li>工作原理：基于对象头的 Monitor 锁机制，确保同一时刻只有一个线程持有锁。  </li><li>场景：保护共享资源的访问，如计数器、缓存。</li></ul></li><li><p><strong><code>synchronized</code> 和 <code>ReentrantLock</code> 的区别是什么？在什么情况下选择使用它们？</strong>  </p><ul><li>区别：  <ul><li><code>synchronized</code> 是隐式锁，语法简单；<code>ReentrantLock</code> 是显式锁，功能强大。  </li><li><code>ReentrantLock</code> 支持公平锁、可中断锁、尝试锁等特性。</li></ul></li><li>选择：优先使用 <code>synchronized</code>，除非需要 <code>ReentrantLock</code> 的高级功能。</li></ul></li><li><p><strong>什么是死锁？如何避免死锁？</strong>  </p><ul><li>死锁：多个线程互相等待对方释放资源，导致无法继续执行。  </li><li>避免方法：  <ol><li>按固定顺序获取锁。  </li><li>使用超时机制（如 <code>tryLock</code>）。  </li><li>避免嵌套锁。</li></ol></li></ul></li><li><p><strong>什么是线程间的通信？如何实现线程间的通信？</strong>  </p><ul><li>线程间通信：通过共享变量或消息传递协调线程行为。  </li><li>实现方式：  <ul><li><code>wait()</code>、<code>notify()</code> 和 <code>notifyAll()</code>。  </li><li><code>Condition</code> 接口。</li></ul></li></ul></li><li><p><strong>什么是活锁和饥饿？它们与死锁有什么区别？</strong>  </p><ul><li>活锁：线程不断尝试操作，但始终失败。  </li><li>饥饿：某些线程长期得不到资源。  </li><li>区别：死锁是线程互相等待，活锁是线程不断尝试，饥饿是资源分配不均。</li></ul></li></ol><hr><h3 id="三、高级并发工具"><a href="#三、高级并发工具" class="headerlink" title="三、高级并发工具"></a><strong>三、高级并发工具</strong></h3><ol start="14"><li><p><strong>Java 并发包（<code>java.util.concurrent</code>）提供了哪些核心工具类？</strong>  </p><ul><li>线程池：<code>ExecutorService</code>、<code>ThreadPoolExecutor</code>。  </li><li>同步工具：<code>CountDownLatch</code>、<code>CyclicBarrier</code>、<code>Semaphore</code>。  </li><li>并发集合：<code>ConcurrentHashMap</code>、<code>CopyOnWriteArrayList</code>。</li></ul></li><li><p><strong>如何使用线程池？线程池有哪些核心参数？如何配置一个合适的线程池？</strong>  </p><ul><li>核心参数：  <ul><li>核心线程数（<code>corePoolSize</code>）  </li><li>最大线程数（<code>maximumPoolSize</code>）  </li><li>队列容量（<code>workQueue</code>）  </li><li>空闲线程存活时间（<code>keepAliveTime</code>）</li></ul></li><li>配置：根据任务类型（CPU 密集型、IO 密集型）调整线程数。</li></ul></li><li><p><strong><code>Future</code> 和 <code>CompletableFuture</code> 的区别是什么？如何使用它们处理异步任务？</strong>  </p><ul><li><code>Future</code>：只支持简单的异步结果获取。  </li><li><code>CompletableFuture</code>：支持链式调用和组合操作。  </li><li>示例：  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">                 .thenApply(s -&gt; s + <span class="string">&quot; World&quot;</span>)</span><br><span class="line">                 .thenAccept(System.out::println);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>什么是 Fork&#x2F;Join 框架？它的适用场景是什么？</strong>  </p><ul><li>适用场景：递归分治问题，如排序、搜索。</li></ul></li><li><p><strong><code>Atomic</code> 类的作用是什么？常见的 <code>Atomic</code> 类有哪些？</strong>  </p><ul><li>提供原子操作，避免锁开销。  </li><li>常见类：<code>AtomicInteger</code>、<code>AtomicLong</code>、<code>AtomicReference</code>。</li></ul></li><li><p><strong><code>ConcurrentHashMap</code> 和普通 <code>HashMap</code> 的区别是什么？它是如何实现线程安全的？</strong>  </p><ul><li>区别：<code>ConcurrentHashMap</code> 支持并发访问，而 <code>HashMap</code> 不支持。  </li><li>实现：分段锁（Segment Lock）或 CAS 操作。</li></ul></li><li><p><strong><code>CopyOnWriteArrayList</code> 是什么？它的适用场景和缺点是什么？</strong>  </p><ul><li>场景：读多写少的场景。  </li><li>缺点：写操作代价高，占用更多内存。</li></ul></li></ol><hr><h3 id="四、并发编程中的常见问题"><a href="#四、并发编程中的常见问题" class="headerlink" title="四、并发编程中的常见问题"></a><strong>四、并发编程中的常见问题</strong></h3><ol start="21"><li><p><strong>什么是可见性、原子性和有序性？如何保证它们？</strong>  </p><ul><li><strong>可见性</strong>：通过 <code>volatile</code> 或锁保证。  </li><li><strong>原子性</strong>：通过 <code>synchronized</code> 或 <code>Atomic</code> 类保证。  </li><li><strong>有序性</strong>：通过 <code>volatile</code> 或 <code>happens-before</code> 规则保证。</li></ul></li><li><p><strong><code>volatile</code> 关键字的作用是什么？它能解决哪些问题？</strong>  </p><ul><li>作用：保证变量的可见性和禁止指令重排序。  </li><li>解决问题：避免多线程环境下变量不可见或重排序导致的问题。</li></ul></li><li><p><strong>双重检查锁定（Double-Checked Locking）是什么？为什么需要使用 <code>volatile</code> 修饰单例对象？</strong>  </p><ul><li>防止指令重排序导致的半初始化问题。</li></ul></li><li><p><strong>什么是伪共享（False Sharing）？如何避免伪共享？</strong>  </p><ul><li>避免方法：通过填充字节（Padding）让变量分布在不同缓存行。</li></ul></li><li><p><strong>如何优雅地停止一个线程？有哪些方法可以实现？</strong>  </p><ul><li>方法：  <ol><li>使用标志位。  </li><li>使用 <code>interrupt()</code> 方法。</li></ol></li></ul></li><li><p><strong>线程中断的三种方式是什么？如何正确处理中断？</strong>  </p><ul><li>方式：  <ol><li>调用 <code>interrupt()</code>。  </li><li>检查 <code>isInterrupted()</code>。  </li><li>捕获 <code>InterruptedException</code>。</li></ol></li></ul></li></ol><hr><h3 id="五、实际应用场景"><a href="#五、实际应用场景" class="headerlink" title="五、实际应用场景"></a><strong>五、实际应用场景</strong></h3><ol start="27"><li><p><strong>如何设计一个生产者-消费者模型？有哪些实现方式？</strong>  </p><ul><li>实现：使用 <code>BlockingQueue</code> 或 <code>synchronized</code> + <code>wait/notify</code>。</li></ul></li><li><p><strong>如何实现一个线程安全的单例模式？有哪些方法？</strong>  </p><ul><li>方法：  <ol><li>饿汉式。  </li><li>懒汉式 + <code>synchronized</code>。  </li><li>双重检查锁定 + <code>volatile</code>。  </li><li>静态内部类。  </li><li>枚举。</li></ol></li></ul></li></ol><hr><p>（剩余问题的答案略，可以根据需要继续补充。）</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题</title>
      <link href="/simonzzz/2025/04/07/skills/interview/interview5/"/>
      <url>/simonzzz/2025/04/07/skills/interview/interview5/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Spring-Boot自动配置的核心过程："><a href="#一、Spring-Boot自动配置的核心过程：" class="headerlink" title="一、Spring Boot自动配置的核心过程："></a>一、Spring Boot自动配置的核心过程：</h2><ol><li><strong>启动触发</strong>：通过<code>@EnableAutoConfiguration</code>启用自动配置。  </li><li><strong>加载配置类</strong>：从<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>读取候选配置类。  </li><li><strong>条件过滤</strong>：基于<code>@Conditional</code>系列注解（如<code>@ConditionalOnClass</code>、<code>@ConditionalOnMissingBean</code>）筛选有效配置。  </li><li><strong>应用配置</strong>：按优先级顺序实例化符合条件的Bean，完成自动装配。</li></ol><p>整个过程遵循”约定优于配置”，减少手动设置，提升开发效率。</p><h2 id="二、springboot打包成war的方式"><a href="#二、springboot打包成war的方式" class="headerlink" title="二、springboot打包成war的方式"></a>二、springboot打包成war的方式</h2><p>将Spring Boot项目打包为WAR只需两步：</p><ol><li>修改<code>pom.xml</code>将打包方式改为<code>war</code>并添加<code>provided</code>范围的Tomcat依赖；</li><li>让主类继承<code>SpringBootServletInitializer</code>并重写<code>configure</code>方法**。最后用<code>mvn package</code>命令生成WAR文件即可部署到外部容器。</li></ol><h2 id="三、springboot的核心注解"><a href="#三、springboot的核心注解" class="headerlink" title="三、springboot的核心注解"></a>三、springboot的核心注解</h2><ol><li><code>@SpringBootApplication</code>：组合了<code>@Configuration</code>、<code>@EnableAutoConfiguration</code>和<code>@ComponentScan</code>三个注解，用于启动一个Spring Boot应用。</li></ol><h2 id="四、springboot的全局异常处理"><a href="#四、springboot的全局异常处理" class="headerlink" title="四、springboot的全局异常处理"></a>四、springboot的全局异常处理</h2><p>Spring Boot 全局异常处理的核心实现方式：  </p><ol><li><p><strong><code>@ControllerAdvice</code> + <code>@ExceptionHandler</code></strong><br>定义全局异常处理类，用 <code>@ControllerAdvice</code> 标注，内部方法用 <code>@ExceptionHandler</code> 捕获特定异常。  </p></li><li><p><strong>返回统一结构</strong><br>在处理方法中封装统一的错误响应（如错误码、错误信息）。  </p></li><li><p><strong>覆盖默认异常处理</strong><br>可覆盖 Spring Boot 默认的 <code>/error</code> 处理，实现自定义异常页面或 JSON 响应。</p></li></ol><p>示例代码：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title function_">handleException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity</span><br><span class="line">            .status(<span class="number">500</span>)</span><br><span class="line">            .body(<span class="keyword">new</span> <span class="title class_">ErrorResponse</span>(<span class="number">500</span>, e.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">特点：**简单注解驱动**，**统一异常拦截**，**支持 REST 和页面**。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 五、在 Spring Boot 中获取配置文件（`application.yml` 或 `application.properties`）中的配置有以下几种常用方式：</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### <span class="number">1.</span> **`<span class="meta">@Value</span>` 注解直接注入**</span><br><span class="line">```java</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;配置键名&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String configValue;</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：<br>配置文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">app.name</span>=<span class="string">MyApp</span></span><br></pre></td></tr></table></figure><p>代码获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;app.name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String appName;</span><br></pre></td></tr></table></figure><hr><h3 id="2-ConfigurationProperties-绑定到对象"><a href="#2-ConfigurationProperties-绑定到对象" class="headerlink" title="2. @ConfigurationProperties 绑定到对象"></a>2. <strong><code>@ConfigurationProperties</code> 绑定到对象</strong></h3><p>适合分组获取多个配置项。<br><strong>步骤</strong>：  </p><ol><li>定义配置类：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;app&quot;)</span> <span class="comment">// 指定配置前缀</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 或通过@EnableConfigurationProperties启用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> version;</span><br><span class="line">    <span class="comment">// getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置文件：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">MyApp</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li>直接注入使用：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AppConfig appConfig;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="3-通过-Environment-对象动态获取"><a href="#3-通过-Environment-对象动态获取" class="headerlink" title="3. 通过 Environment 对象动态获取"></a>3. <strong>通过 <code>Environment</code> 对象动态获取</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> env.getProperty(<span class="string">&quot;配置键名&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="4-PropertySource-读取自定义配置文件"><a href="#4-PropertySource-读取自定义配置文件" class="headerlink" title="4. @PropertySource 读取自定义配置文件"></a>4. <strong><code>@PropertySource</code> 读取自定义配置文件</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:custom.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;custom.key&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String customValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ol><li><strong>优先级</strong>：<br>Spring Boot 配置加载顺序为：命令行参数 &gt; <code>application-&#123;profile&#125;.yml</code> &gt; <code>application.yml</code> &gt; 默认值。</li><li><strong>多环境配置</strong>：<br>使用 <code>spring.profiles.active=dev</code> 指定环境（如 <code>application-dev.yml</code>）。</li><li><strong>类型安全</strong>：<br>推荐使用 <code>@ConfigurationProperties</code> 避免硬编码和类型错误。</li></ol><p>选择方式根据场景：  </p><ul><li>简单值 → <code>@Value</code>  </li><li>分组配置 → <code>@ConfigurationProperties</code>  </li><li>动态获取 → <code>Environment</code></li></ul><h2 id="六、Spring-Boot-加载-所有类型配置文件-的顺序（优先级从高到低）："><a href="#六、Spring-Boot-加载-所有类型配置文件-的顺序（优先级从高到低）：" class="headerlink" title="六、Spring Boot 加载 所有类型配置文件 的顺序（优先级从高到低）："></a>六、Spring Boot 加载 <strong>所有类型配置文件</strong> 的顺序（<strong>优先级从高到低</strong>）：</h2><h3 id="1-外部配置（优先级最高）"><a href="#1-外部配置（优先级最高）" class="headerlink" title="1. 外部配置（优先级最高）"></a><strong>1. 外部配置（优先级最高）</strong></h3><ul><li><strong>命令行参数</strong>（<code>--key=value</code>，如 <code>java -jar app.jar --server.port=8081</code>）  </li><li><strong>操作系统环境变量</strong>（如 <code>export SERVER_PORT=8081</code>）  </li><li><strong>Java 系统属性</strong>（<code>-Dkey=value</code>，如 <code>-Dserver.port=8081</code>）</li></ul><h3 id="2-外部配置文件"><a href="#2-外部配置文件" class="headerlink" title="2. 外部配置文件"></a><strong>2. 外部配置文件</strong></h3><ul><li><strong><code>config/</code> 目录下的配置文件</strong>（按以下顺序）：  <ul><li>项目根目录下的 <code>/config/application.&#123;properties|yml&#125;</code>  </li><li>项目根目录下的 <code>application.&#123;properties|yml&#125;</code>  </li><li><code>classpath:/config/application.&#123;properties|yml&#125;</code>（<code>resources/config/</code>）  </li><li><code>classpath:/application.&#123;properties|yml&#125;</code>（<code>resources/</code>）</li></ul></li></ul><h3 id="3-Profile-专属配置"><a href="#3-Profile-专属配置" class="headerlink" title="3. Profile 专属配置"></a><strong>3. Profile 专属配置</strong></h3><ul><li>**<code>application-&#123;profile&#125;.&#123;properties|yml&#125;</code>**（如 <code>application-dev.yml</code>）  </li><li>通过 <code>spring.profiles.active</code> 指定生效的 Profile（如 <code>dev</code>、<code>prod</code>）</li></ul><h3 id="4-默认配置（优先级最低）"><a href="#4-默认配置（优先级最低）" class="headerlink" title="4. 默认配置（优先级最低）"></a><strong>4. 默认配置（优先级最低）</strong></h3><ul><li><strong><code>@PropertySource</code> 指定的自定义文件</strong>（如 <code>@PropertySource(&quot;classpath:custom.properties&quot;)</code>）  </li><li><strong>Spring Boot 默认配置</strong>（如 <code>SpringApplication.setDefaultProperties</code>）</li></ul><hr><h3 id="总结（加载顺序）："><a href="#总结（加载顺序）：" class="headerlink" title="总结（加载顺序）："></a><strong>总结（加载顺序）</strong>：</h3><ol><li><strong>命令行参数</strong> &gt; <strong>环境变量</strong> &gt; <strong>Java 系统属性</strong>  </li><li><strong>外部 <code>/config/</code> 目录配置</strong> &gt; <strong>外部根目录配置</strong> &gt; <strong><code>classpath:/config/</code></strong> &gt; <strong><code>classpath:/</code></strong>  </li><li>**<code>application-&#123;profile&#125;.&#123;properties|yml&#125;</code>**（Profile 专属配置）  </li><li><strong><code>@PropertySource</code> 自定义文件</strong> &gt; <strong>Spring Boot 默认值</strong></li></ol><p><strong>关键点</strong>：</p><ul><li><strong>相同配置，后加载的会覆盖先加载的</strong>。  </li><li><strong><code>Profile</code> 机制允许不同环境使用不同配置</strong>（如 <code>dev</code>、<code>test</code>、<code>prod</code>）。  </li><li><strong>外部配置优先级 &gt; JAR 包内部配置</strong>，便于部署时动态调整。</li></ul><p>适用于：<code>properties</code>、<code>yml</code>、<code>yaml</code> 等所有 Spring Boot 支持的配置文件格式。</p><h2 id="七、在-Spring-Boot（特别是结合-Spring-Cloud-时），-bootstrap-配置文件-的加载逻辑如下："><a href="#七、在-Spring-Boot（特别是结合-Spring-Cloud-时），-bootstrap-配置文件-的加载逻辑如下：" class="headerlink" title="七、在 Spring Boot（特别是结合 Spring Cloud 时），**bootstrap 配置文件**的加载逻辑如下："></a>七、在 Spring Boot（特别是结合 Spring Cloud 时），**<code>bootstrap</code> 配置文件**的加载逻辑如下：</h2><ol><li><strong>优先级最高</strong>：比 <code>application</code> 文件更早加载，用于<strong>系统级配置</strong>（如加密信息、Consul&#x2F;Nacos 配置中心连接参数）。  </li><li><strong>加载顺序</strong>：  <ul><li>先加载 <code>bootstrap.yml/properties</code>（或 <code>bootstrap-&#123;profile&#125;.yml</code>）  </li><li>再加载 <code>application.yml/properties</code></li></ul></li><li><strong>典型场景</strong>：配置中心的地址、加密密钥、Spring Cloud 相关配置（如 <code>spring.cloud.nacos.config</code>）。  </li><li><strong>默认关闭</strong>：需依赖 <code>spring-cloud-starter-bootstrap</code>（旧版）或通过 <code>spring.config.use-legacy-processing=true</code> 启用（新版 Spring Cloud 2020+）。</li></ol><p><strong>一句话</strong>：<code>bootstrap</code> 是“配置的配置”，先于 <code>application</code> 加载，适合<strong>初始化关键基础设施</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql如何优化慢SQL</title>
      <link href="/simonzzz/2025/04/07/skills/mysql/sqlBeBetterInMysql/"/>
      <url>/simonzzz/2025/04/07/skills/mysql/sqlBeBetterInMysql/</url>
      
        <content type="html"><![CDATA[<p>在 MySQL 中，针对慢 SQL 的优化是一个常见的性能调优任务。慢 SQL 通常是由于查询效率低下、索引缺失、数据量过大或数据库设计不合理等原因引起的。以下是优化慢 SQL 的详细步骤和方法：</p><hr><h3 id="1-定位慢-SQL"><a href="#1-定位慢-SQL" class="headerlink" title="1. 定位慢 SQL"></a><strong>1. 定位慢 SQL</strong></h3><h4 id="1-开启慢查询日志"><a href="#1-开启慢查询日志" class="headerlink" title="(1) 开启慢查询日志"></a><strong>(1) 开启慢查询日志</strong></h4><p>MySQL 提供了慢查询日志功能，可以记录执行时间超过指定阈值的 SQL 语句。</p><ul><li>配置参数：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看当前慢查询日志是否开启</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;slow_query_log&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置慢查询日志路径</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log_file <span class="operator">=</span> <span class="string">&#x27;/path/to/slow_query.log&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置慢查询时间阈值（单位：秒）</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> long_query_time <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启慢查询日志</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log <span class="operator">=</span> <span class="string">&#x27;ON&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>慢查询日志会记录执行时间超过 <code>long_query_time</code> 的 SQL。</li></ul><h4 id="2-使用-EXPLAIN-分析查询计划"><a href="#2-使用-EXPLAIN-分析查询计划" class="headerlink" title="(2) 使用 EXPLAIN 分析查询计划"></a><strong>(2) 使用 <code>EXPLAIN</code> 分析查询计划</strong></h4><p>通过 <code>EXPLAIN</code> 命令可以查看 SQL 的执行计划，分析查询是否使用了索引以及扫描了多少行数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name <span class="operator">=</span> <span class="string">&#x27;value&#x27;</span>;</span><br></pre></td></tr></table></figure><p>重点关注以下字段：</p><ul><li><strong>type</strong>：查询类型（如 <code>ALL</code> 表示全表扫描，<code>index</code> 表示索引扫描，<code>ref</code> 表示使用索引查找）。</li><li><strong>rows</strong>：扫描的行数，越小越好。</li><li><strong>Extra</strong>：额外信息（如 <code>Using where</code>、<code>Using filesort</code>、<code>Using temporary</code> 等，可能表明性能问题）。</li></ul><hr><h3 id="2-优化-SQL-查询"><a href="#2-优化-SQL-查询" class="headerlink" title="2. 优化 SQL 查询"></a><strong>2. 优化 SQL 查询</strong></h3><h4 id="1-使用合适的索引"><a href="#1-使用合适的索引" class="headerlink" title="(1) 使用合适的索引"></a><strong>(1) 使用合适的索引</strong></h4><ul><li><strong>创建索引</strong>：<ul><li>在经常用于过滤（<code>WHERE</code>）、排序（<code>ORDER BY</code>）或连接（<code>JOIN</code>）的列上创建索引。</li><li>示例：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_column_name <span class="keyword">ON</span> table_name(column_name);</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>复合索引</strong>：<ul><li>如果查询涉及多个条件，可以创建复合索引（联合索引），但要注意索引列的顺序。</li><li>示例：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_col1_col2 <span class="keyword">ON</span> table_name(col1, col2);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="2-避免全表扫描"><a href="#2-避免全表扫描" class="headerlink" title="(2) 避免全表扫描"></a><strong>(2) 避免全表扫描</strong></h4><ul><li><strong>减少不必要的列</strong>：<ul><li>只查询需要的列，避免使用 <code>SELECT *</code>。</li><li>示例：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1, col2 <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>限制返回行数</strong>：<ul><li>使用 <code>LIMIT</code> 限制返回的行数，尤其是分页查询时。</li><li>示例：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span> LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3-优化-JOIN-操作"><a href="#3-优化-JOIN-操作" class="headerlink" title="(3) 优化 JOIN 操作"></a><strong>(3) 优化 JOIN 操作</strong></h4><ul><li><strong>确保连接列有索引</strong>：<ul><li>在 <code>JOIN</code> 操作中，确保连接条件的列上有索引。</li></ul></li><li><strong>避免笛卡尔积</strong>：<ul><li>确保 <code>JOIN</code> 条件明确，避免无条件连接导致的笛卡尔积。</li></ul></li></ul><h4 id="4-避免复杂的子查询"><a href="#4-避免复杂的子查询" class="headerlink" title="(4) 避免复杂的子查询"></a><strong>(4) 避免复杂的子查询</strong></h4><ul><li><strong>改写子查询为 JOIN</strong>：<ul><li>子查询可能会导致性能问题，尽量将其改写为 <code>JOIN</code>。</li><li>示例：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 原始子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1 <span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> table2 <span class="keyword">WHERE</span> <span class="keyword">condition</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 改写为 JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> table1.<span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> table1 </span><br><span class="line"><span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.id <span class="operator">=</span> table2.id </span><br><span class="line"><span class="keyword">WHERE</span> table2.condition;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="5-使用覆盖索引"><a href="#5-使用覆盖索引" class="headerlink" title="(5) 使用覆盖索引"></a><strong>(5) 使用覆盖索引</strong></h4><ul><li><strong>覆盖索引</strong>是指查询的所有列都包含在索引中，从而避免回表操作。</li><li>示例：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 假设有一个复合索引 (col1, col2)</span></span><br><span class="line"><span class="keyword">SELECT</span> col1, col2 <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> col1 <span class="operator">=</span> <span class="string">&#x27;value&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="3-数据库层面优化"><a href="#3-数据库层面优化" class="headerlink" title="3. 数据库层面优化"></a><strong>3. 数据库层面优化</strong></h3><h4 id="1-调整-MySQL-配置"><a href="#1-调整-MySQL-配置" class="headerlink" title="(1) 调整 MySQL 配置"></a><strong>(1) 调整 MySQL 配置</strong></h4><ul><li><strong>调整缓冲区大小</strong>：<ul><li>增加 <code>innodb_buffer_pool_size</code>，提升 InnoDB 表的查询性能。</li><li>示例：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> innodb_buffer_pool_size <span class="operator">=</span> <span class="number">4</span>G;</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>优化查询缓存</strong>（MySQL 8.0 已移除）：<ul><li>如果使用的是 MySQL 5.x 版本，可以启用查询缓存。</li><li>示例：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> query_cache_type <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> query_cache_size <span class="operator">=</span> <span class="number">64</span>M;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="2-分区表"><a href="#2-分区表" class="headerlink" title="(2) 分区表"></a><strong>(2) 分区表</strong></h4><ul><li>对于大表，可以使用分区表来提高查询效率。</li><li>示例：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> partitioned_table (</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    created_at <span class="type">DATE</span></span><br><span class="line">) <span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> (<span class="keyword">YEAR</span>(created_at)) (</span><br><span class="line">    <span class="keyword">PARTITION</span> p2020 <span class="keyword">VALUES</span> LESS THAN (<span class="number">2021</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p2021 <span class="keyword">VALUES</span> LESS THAN (<span class="number">2022</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-数据归档"><a href="#3-数据归档" class="headerlink" title="(3) 数据归档"></a><strong>(3) 数据归档</strong></h4><ul><li>将历史数据迁移到归档表中，减少主表的数据量。</li></ul><hr><h3 id="4-应用层面优化"><a href="#4-应用层面优化" class="headerlink" title="4. 应用层面优化"></a><strong>4. 应用层面优化</strong></h3><h4 id="1-缓存查询结果"><a href="#1-缓存查询结果" class="headerlink" title="(1) 缓存查询结果"></a><strong>(1) 缓存查询结果</strong></h4><ul><li>使用应用层缓存（如 Redis、Memcached）存储频繁查询的结果，减少数据库压力。</li></ul><h4 id="2-异步处理"><a href="#2-异步处理" class="headerlink" title="(2) 异步处理"></a><strong>(2) 异步处理</strong></h4><ul><li>对于耗时的查询或写操作，可以采用异步方式处理，避免阻塞主线程。</li></ul><h4 id="3-批量操作"><a href="#3-批量操作" class="headerlink" title="(3) 批量操作"></a><strong>(3) 批量操作</strong></h4><ul><li>对于大量数据的插入或更新操作，尽量采用批量处理，减少单条语句的开销。</li></ul><hr><h3 id="5-监控与测试"><a href="#5-监控与测试" class="headerlink" title="5. 监控与测试"></a><strong>5. 监控与测试</strong></h3><h4 id="1-使用性能监控工具"><a href="#1-使用性能监控工具" class="headerlink" title="(1) 使用性能监控工具"></a><strong>(1) 使用性能监控工具</strong></h4><ul><li>使用工具（如 MySQL 自带的 <code>Performance Schema</code> 或第三方工具如 <code>pt-query-digest</code>）分析慢查询。</li><li>示例：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> performance_schema.events_statements_summary_by_digest;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-测试优化效果"><a href="#2-测试优化效果" class="headerlink" title="(2) 测试优化效果"></a><strong>(2) 测试优化效果</strong></h4><ul><li>使用 <code>EXPLAIN</code> 和 <code>SHOW PROFILES</code> 分析优化前后的查询性能。</li><li>示例：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> PROFILES;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>优化慢 SQL 是一个系统性工程，通常需要从以下几个方面入手：</p><ol><li><strong>定位问题</strong>：通过慢查询日志和 <code>EXPLAIN</code> 找到瓶颈。</li><li><strong>优化查询</strong>：合理使用索引、避免全表扫描、改写复杂查询。</li><li><strong>调整配置</strong>：优化 MySQL 参数和表结构。</li><li><strong>应用优化</strong>：引入缓存、异步处理等手段减轻数据库压力。</li></ol><p>通过以上方法，可以有效提升慢 SQL 的执行效率，改善数据库的整体性能。如果仍有具体问题，请提供 SQL 和表结构，我可以进一步分析！</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程开发</title>
      <link href="/simonzzz/2025/04/07/skills/interview/interview2/"/>
      <url>/simonzzz/2025/04/07/skills/interview/interview2/</url>
      
        <content type="html"><![CDATA[<h3 id="多线程使用"><a href="#多线程使用" class="headerlink" title="多线程使用"></a><strong>多线程使用</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> basic.multipleThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPool</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">makeThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 直接启动线程的方式（不推荐）</span></span><br><span class="line">        <span class="type">ThreadExtend</span> <span class="variable">threadExtend</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadExtend</span>();</span><br><span class="line">        threadExtend.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadRunnable</span> <span class="variable">threadRunable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadRunnable</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(threadRunable);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadCallable</span> <span class="variable">threadCallable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadCallable</span>();</span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(threadCallable);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            futureTask.run(); <span class="comment">// 或者使用线程池来执行</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> futureTask.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;Callable Result: &quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createThreadPoolExamples</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 使用 FixedThreadPool</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">fixedThreadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        fixedThreadPool.submit(<span class="keyword">new</span> <span class="title class_">ThreadExtend</span>());</span><br><span class="line">        fixedThreadPool.submit(<span class="keyword">new</span> <span class="title class_">ThreadRunnable</span>());</span><br><span class="line">        Future&lt;String&gt; futureFromFixedThreadPool = fixedThreadPool.submit(<span class="keyword">new</span> <span class="title class_">ThreadCallable</span>());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> futureFromFixedThreadPool.get(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">            System.out.println(<span class="string">&quot;FixedThreadPool Callable Result: &quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException | TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            fixedThreadPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 使用 CachedThreadPool</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">cachedThreadPool</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        cachedThreadPool.submit(<span class="keyword">new</span> <span class="title class_">ThreadExtend</span>());</span><br><span class="line">        cachedThreadPool.submit(<span class="keyword">new</span> <span class="title class_">ThreadRunnable</span>());</span><br><span class="line">        Future&lt;String&gt; futureFromCachedThreadPool = cachedThreadPool.submit(<span class="keyword">new</span> <span class="title class_">ThreadCallable</span>());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> futureFromCachedThreadPool.get(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">            System.out.println(<span class="string">&quot;CachedThreadPool Callable Result: &quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException | TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            cachedThreadPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 使用 SingleThreadExecutor</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">singleThreadExecutor</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">        singleThreadExecutor.submit(<span class="keyword">new</span> <span class="title class_">ThreadExtend</span>());</span><br><span class="line">        singleThreadExecutor.submit(<span class="keyword">new</span> <span class="title class_">ThreadRunnable</span>());</span><br><span class="line">        Future&lt;String&gt; futureFromSingleThreadExecutor = singleThreadExecutor.submit(<span class="keyword">new</span> <span class="title class_">ThreadCallable</span>());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> futureFromSingleThreadExecutor.get(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">            System.out.println(<span class="string">&quot;SingleThreadExecutor Callable Result: &quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException | TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            singleThreadExecutor.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 使用 ScheduledThreadPool</span></span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">scheduledThreadPool</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">3</span>);</span><br><span class="line">        scheduledThreadPool.schedule(<span class="keyword">new</span> <span class="title class_">ThreadExtend</span>(), <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">        scheduledThreadPool.schedule(<span class="keyword">new</span> <span class="title class_">ThreadRunnable</span>(), <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">        ScheduledFuture&lt;String&gt; futureFromScheduledThreadPool = scheduledThreadPool.schedule(<span class="keyword">new</span> <span class="title class_">ThreadCallable</span>(), <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> futureFromScheduledThreadPool.get(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">            System.out.println(<span class="string">&quot;ScheduledThreadPool Callable Result: &quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException | TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            scheduledThreadPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 使用 WorkStealingPool</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">workStealingPool</span> <span class="operator">=</span> Executors.newWorkStealingPool();</span><br><span class="line">        workStealingPool.submit(<span class="keyword">new</span> <span class="title class_">ThreadExtend</span>());</span><br><span class="line">        workStealingPool.submit(<span class="keyword">new</span> <span class="title class_">ThreadRunnable</span>());</span><br><span class="line">        Future&lt;String&gt; futureFromWorkStealingPool = workStealingPool.submit(<span class="keyword">new</span> <span class="title class_">ThreadCallable</span>());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> futureFromWorkStealingPool.get(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">            System.out.println(<span class="string">&quot;WorkStealingPool Callable Result: &quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException | TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            workStealingPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadPool</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPool</span>();</span><br><span class="line">        threadPool.makeThreadPool();</span><br><span class="line">        threadPool.createThreadPoolExamples();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例实现：ThreadExtend</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadExtend</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ThreadExtend is running...&quot;</span>);</span><br><span class="line">        <span class="comment">// 模拟任务逻辑</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">            System.err.println(<span class="string">&quot;ThreadExtend was interrupted: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例实现：ThreadRunnable</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ThreadRunnable is running...&quot;</span>);</span><br><span class="line">        <span class="comment">// 模拟任务逻辑</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">            System.err.println(<span class="string">&quot;ThreadRunnable was interrupted: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例实现：ThreadCallable</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ThreadCallable is running...&quot;</span>);</span><br><span class="line">        <span class="comment">// 模拟任务逻辑</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Callable Task Completed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化点总结"><a href="#优化点总结" class="headerlink" title="优化点总结"></a>优化点总结</h3><ol><li><strong>异常处理增强</strong>：为 <code>Future.get()</code> 方法添加超时机制，并捕获可能的异常（如 <code>TimeoutException</code> 和 <code>ExecutionException</code>），确保程序的健壮性。</li><li><strong>资源管理改进</strong>：在 <code>finally</code> 块中调用 <code>executor.shutdown()</code>，确保线程池在任务完成后被正确关闭。</li><li><strong>多种线程池创建方式</strong>：展示了 <code>FixedThreadPool</code>、<code>CachedThreadPool</code>、<code>SingleThreadExecutor</code>、<code>ScheduledThreadPool</code> 和 <code>WorkStealingPool</code> 五种创建线程池的方式，并展示了如何使用这些线程池来提交任务。</li><li><strong>代码封装性提升</strong>：将线程任务的启动逻辑封装到 <code>ThreadPool</code> 类中，提高代码的可读性和可维护性。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 并发工具：CountDownLatch 与 CyclicBarrier 详解</title>
      <link href="/simonzzz/2025/01/08/skills/point/countdownlatchAndCycleBarrier/"/>
      <url>/simonzzz/2025/01/08/skills/point/countdownlatchAndCycleBarrier/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Java-并发工具：CountDownLatch-与-CyclicBarrier-详解"><a href="#Java-并发工具：CountDownLatch-与-CyclicBarrier-详解" class="headerlink" title="Java 并发工具：CountDownLatch 与 CyclicBarrier 详解"></a><strong>Java 并发工具：CountDownLatch 与 CyclicBarrier 详解</strong></h1><p>在多线程编程中，协调多个线程的执行顺序是一个常见的需求。<code>CountDownLatch</code> 和 <code>CyclicBarrier</code> 是 Java 并发包 <code>java.util.concurrent</code> 提供的两个同步工具类，它们可以帮助我们轻松实现线程间的协作。本文将通过实际例子详细讲解两者的原理、区别以及适用场景。</p><hr><h2 id="一、CountDownLatch-讲解"><a href="#一、CountDownLatch-讲解" class="headerlink" title="一、CountDownLatch 讲解"></a><strong>一、CountDownLatch 讲解</strong></h2><h3 id="1-CountDownLatch-的核心概念"><a href="#1-CountDownLatch-的核心概念" class="headerlink" title="1. CountDownLatch 的核心概念"></a><strong>1. CountDownLatch 的核心概念</strong></h3><p><code>CountDownLatch</code> 是一个同步工具类，允许一个或多个线程等待其他线程完成一系列操作后继续执行。它的核心是基于一个计数器：</p><ul><li>初始值为指定的计数值（<code>count</code>）。</li><li>每次调用 <code>countDown()</code> 方法时，计数器减 1。</li><li>当计数器减到 0 时，所有等待的线程会被唤醒并继续执行。</li></ul><p><strong>特点</strong>：</p><ul><li>计数器不可重置，只能使用一次。</li><li>主要用于“一个线程等待多个线程完成任务”的场景。</li></ul><hr><h3 id="2-CountDownLatch-的典型应用场景"><a href="#2-CountDownLatch-的典型应用场景" class="headerlink" title="2. CountDownLatch 的典型应用场景"></a><strong>2. CountDownLatch 的典型应用场景</strong></h3><p>假设我们有一个物流系统，主线程需要等待三个仓库分别完成货物准备后才能启动运输任务。这种场景非常适合使用 <code>CountDownLatch</code>。</p><hr><h3 id="3-示例代码"><a href="#3-示例代码" class="headerlink" title="3. 示例代码"></a><strong>3. 示例代码</strong></h3><p>以下是一个完整的 <code>CountDownLatch</code> 使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogisticsSystemWithCountDownLatch</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个 CountDownLatch，初始计数为 3（代表 3 个仓库）</span></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动 3 个仓库线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">WarehouseTask</span>(i, latch)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 主线程等待所有仓库完成任务</span></span><br><span class="line">            latch.await();</span><br><span class="line">            System.out.println(<span class="string">&quot;所有仓库货物已准备完毕，开始运输！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程被中断: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 仓库任务类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WarehouseTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> warehouseId;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch latch;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">WarehouseTask</span><span class="params">(<span class="type">int</span> warehouseId, CountDownLatch latch)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.warehouseId = warehouseId;</span><br><span class="line">            <span class="built_in">this</span>.latch = latch;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;仓库 &quot;</span> + warehouseId + <span class="string">&quot; 正在准备货物...&quot;</span>);</span><br><span class="line">                Thread.sleep((<span class="type">long</span>) (Math.random() * <span class="number">2000</span>)); <span class="comment">// 模拟准备时间</span></span><br><span class="line">                System.out.println(<span class="string">&quot;仓库 &quot;</span> + warehouseId + <span class="string">&quot; 已完成货物准备！&quot;</span>);</span><br><span class="line">                latch.countDown(); <span class="comment">// 完成任务，计数器减 1</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">                System.out.println(<span class="string">&quot;仓库 &quot;</span> + warehouseId + <span class="string">&quot; 发生异常: &quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-输出示例"><a href="#4-输出示例" class="headerlink" title="4. 输出示例"></a><strong>4. 输出示例</strong></h3><p>运行上述代码后，可能得到如下输出（随机时间导致每次结果略有不同）：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">仓库<span class="number"> 1 </span>正在准备货物...</span><br><span class="line">仓库<span class="number"> 2 </span>正在准备货物...</span><br><span class="line">仓库<span class="number"> 3 </span>正在准备货物...</span><br><span class="line">仓库<span class="number"> 3 </span>已完成货物准备！</span><br><span class="line">仓库<span class="number"> 1 </span>已完成货物准备！</span><br><span class="line">仓库<span class="number"> 2 </span>已完成货物准备！</span><br><span class="line">所有仓库货物已准备完毕，开始运输！</span><br></pre></td></tr></table></figure><hr><h3 id="5-核心方法"><a href="#5-核心方法" class="headerlink" title="5. 核心方法"></a><strong>5. 核心方法</strong></h3><ul><li>**<code>await()</code>**：让当前线程等待，直到计数器减到 0。</li><li>**<code>countDown()</code>**：将计数器减 1。</li><li><strong>不可重置</strong>：一旦计数器减到 0，无法再次使用。</li></ul><hr><h2 id="二、CyclicBarrier-讲解"><a href="#二、CyclicBarrier-讲解" class="headerlink" title="二、CyclicBarrier 讲解"></a><strong>二、CyclicBarrier 讲解</strong></h2><h3 id="1-CyclicBarrier-的核心概念"><a href="#1-CyclicBarrier-的核心概念" class="headerlink" title="1. CyclicBarrier 的核心概念"></a><strong>1. CyclicBarrier 的核心概念</strong></h3><p><code>CyclicBarrier</code> 是一个同步工具类，允许多个线程相互等待，直到所有线程都到达某个屏障点后再继续执行。它的核心是基于一个计数器：</p><ul><li>初始值为参与线程的数量（<code>parties</code>）。</li><li>每次调用 <code>await()</code> 方法时，计数器减 1。</li><li>当计数器减到 0 时，所有等待的线程会被唤醒并继续执行。</li></ul><p><strong>特点</strong>：</p><ul><li>计数器可以重置，支持多次同步。</li><li>可以设置屏障动作（Runnable），当所有线程到达屏障点时执行特定逻辑。</li></ul><hr><h3 id="2-CyclicBarrier-的典型应用场景"><a href="#2-CyclicBarrier-的典型应用场景" class="headerlink" title="2. CyclicBarrier 的典型应用场景"></a><strong>2. CyclicBarrier 的典型应用场景</strong></h3><p>假设我们有一个物流系统，多个仓库需要同时完成货物装车后才能统一发车。这种场景非常适合使用 <code>CyclicBarrier</code>。</p><hr><h3 id="3-示例代码-1"><a href="#3-示例代码-1" class="headerlink" title="3. 示例代码"></a><strong>3. 示例代码</strong></h3><p>以下是一个完整的 <code>CyclicBarrier</code> 使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogisticsSystemWithCyclicBarrier</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义仓库数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">WAREHOUSE_COUNT</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个 CyclicBarrier，指定参与线程数，并设置屏障动作</span></span><br><span class="line">        <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(WAREHOUSE_COUNT, () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;所有仓库货物已装车，开始统一发车！&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动每个仓库的线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= WAREHOUSE_COUNT; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">WarehouseTask</span>(i, cyclicBarrier)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 仓库任务类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WarehouseTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> warehouseId;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> CyclicBarrier cyclicBarrier;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">WarehouseTask</span><span class="params">(<span class="type">int</span> warehouseId, CyclicBarrier cyclicBarrier)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.warehouseId = warehouseId;</span><br><span class="line">            <span class="built_in">this</span>.cyclicBarrier = cyclicBarrier;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 1. 准备货物</span></span><br><span class="line">                System.out.println(<span class="string">&quot;仓库 &quot;</span> + warehouseId + <span class="string">&quot; 正在准备货物...&quot;</span>);</span><br><span class="line">                Thread.sleep((<span class="type">long</span>) (Math.random() * <span class="number">2000</span>)); <span class="comment">// 模拟准备时间</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 2. 装车</span></span><br><span class="line">                System.out.println(<span class="string">&quot;仓库 &quot;</span> + warehouseId + <span class="string">&quot; 正在装车...&quot;</span>);</span><br><span class="line">                Thread.sleep((<span class="type">long</span>) (Math.random() * <span class="number">2000</span>)); <span class="comment">// 模拟装车时间</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 到达屏障点，等待其他仓库</span></span><br><span class="line">                System.out.println(<span class="string">&quot;仓库 &quot;</span> + warehouseId + <span class="string">&quot; 已完成装车，等待其他仓库...&quot;</span>);</span><br><span class="line">                cyclicBarrier.await();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 3. 发车（屏障动作完成后，所有线程继续执行）</span></span><br><span class="line">                System.out.println(<span class="string">&quot;仓库 &quot;</span> + warehouseId + <span class="string">&quot; 的货物已发车！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">                System.out.println(<span class="string">&quot;仓库 &quot;</span> + warehouseId + <span class="string">&quot; 发生异常: &quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-输出示例-1"><a href="#4-输出示例-1" class="headerlink" title="4. 输出示例"></a><strong>4. 输出示例</strong></h3><p>运行上述代码后，可能得到如下输出：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">仓库<span class="number"> 1 </span>正在准备货物...</span><br><span class="line">仓库<span class="number"> 2 </span>正在准备货物...</span><br><span class="line">仓库<span class="number"> 3 </span>正在准备货物...</span><br><span class="line">仓库<span class="number"> 1 </span>正在装车...</span><br><span class="line">仓库<span class="number"> 3 </span>正在装车...</span><br><span class="line">仓库<span class="number"> 2 </span>正在装车...</span><br><span class="line">仓库<span class="number"> 1 </span>已完成装车，等待其他仓库...</span><br><span class="line">仓库<span class="number"> 2 </span>已完成装车，等待其他仓库...</span><br><span class="line">仓库<span class="number"> 3 </span>已完成装车，等待其他仓库...</span><br><span class="line">所有仓库货物已装车，开始统一发车！</span><br><span class="line">仓库<span class="number"> 1 </span>的货物已发车！</span><br><span class="line">仓库<span class="number"> 2 </span>的货物已发车！</span><br><span class="line">仓库<span class="number"> 3 </span>的货物已发车！</span><br></pre></td></tr></table></figure><hr><h3 id="5-核心方法-1"><a href="#5-核心方法-1" class="headerlink" title="5. 核心方法"></a><strong>5. 核心方法</strong></h3><ul><li>**<code>await()</code>**：让当前线程等待，直到所有线程都到达屏障点。</li><li><strong>屏障动作</strong>：可以在构造函数中传入一个 <code>Runnable</code>，当所有线程到达屏障点时执行。</li><li><strong>可重置</strong>：计数器可以重新设置，支持多次同步。</li></ul><hr><h2 id="三、CountDownLatch-与-CyclicBarrier-的对比"><a href="#三、CountDownLatch-与-CyclicBarrier-的对比" class="headerlink" title="三、CountDownLatch 与 CyclicBarrier 的对比"></a><strong>三、CountDownLatch 与 CyclicBarrier 的对比</strong></h2><table><thead><tr><th>特性</th><th>CountDownLatch</th><th>CyclicBarrier</th></tr></thead><tbody><tr><td><strong>计数器重置</strong></td><td>不可重置，只能使用一次</td><td>可以重置，支持多次同步</td></tr><tr><td><strong>线程角色</strong></td><td>一个或多个线程等待其他线程完成任务</td><td>多个线程相互等待，直到所有线程都到达屏障点</td></tr><tr><td><strong>屏障动作</strong></td><td>不支持</td><td>支持在所有线程到达屏障点后执行一个屏障动作</td></tr><tr><td><strong>典型应用场景</strong></td><td>等待某些任务完成后才能继续执行</td><td>需要多个线程协同完成任务后再继续执行</td></tr><tr><td><strong>实现方式</strong></td><td>基于 AQS（AbstractQueuedSynchronizer）实现</td><td>基于 <code>ReentrantLock</code> 和 <code>Condition</code> 实现</td></tr></tbody></table><hr><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a><strong>四、总结</strong></h2><ul><li><strong>CountDownLatch</strong> 更适合“一个线程等待多个线程完成任务”的场景，例如主线程等待子线程完成初始化、任务分配等。</li><li><strong>CyclicBarrier</strong> 更适合“多个线程相互等待，直到所有线程都完成任务后再继续执行”的场景，例如多仓库协同工作、批量数据处理等。</li></ul><p>通过本文的讲解和示例代码，相信你已经掌握了 <code>CountDownLatch</code> 和 <code>CyclicBarrier</code> 的使用方法及其适用场景。希望这些内容能帮助你在并发编程中更加得心应手！</p><hr>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 教程 </tag>
            
            <tag> cycleBarrier </tag>
            
            <tag> countDownLatch </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
